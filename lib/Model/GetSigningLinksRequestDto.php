<?php
/**
 * GetSigningLinksRequestDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  AssureSign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://localhost:44304/api/v3.6/account)</h3>
 *
 * OpenAPI spec version: 3.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * GetSigningLinksRequestDto Class Doc Comment
 *
 * @category Class
 * @package  AssureSign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetSigningLinksRequestDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'getSigningLinksRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'envelope_id' => 'string',
'link_expiration_date' => '\DateTime',
'include_only_current_signers' => 'bool',
'redirect_url' => 'string',
'is_authenticated' => 'bool',
'suppress_header' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'envelope_id' => 'uuid',
'link_expiration_date' => 'date-time',
'include_only_current_signers' => null,
'redirect_url' => null,
'is_authenticated' => null,
'suppress_header' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'envelope_id' => 'envelopeID',
'link_expiration_date' => 'linkExpirationDate',
'include_only_current_signers' => 'includeOnlyCurrentSigners',
'redirect_url' => 'redirectUrl',
'is_authenticated' => 'isAuthenticated',
'suppress_header' => 'suppressHeader'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'envelope_id' => 'setEnvelopeId',
'link_expiration_date' => 'setLinkExpirationDate',
'include_only_current_signers' => 'setIncludeOnlyCurrentSigners',
'redirect_url' => 'setRedirectUrl',
'is_authenticated' => 'setIsAuthenticated',
'suppress_header' => 'setSuppressHeader'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'envelope_id' => 'getEnvelopeId',
'link_expiration_date' => 'getLinkExpirationDate',
'include_only_current_signers' => 'getIncludeOnlyCurrentSigners',
'redirect_url' => 'getRedirectUrl',
'is_authenticated' => 'getIsAuthenticated',
'suppress_header' => 'getSuppressHeader'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['envelope_id'] = isset($data['envelope_id']) ? $data['envelope_id'] : null;
        $this->container['link_expiration_date'] = isset($data['link_expiration_date']) ? $data['link_expiration_date'] : null;
        $this->container['include_only_current_signers'] = isset($data['include_only_current_signers']) ? $data['include_only_current_signers'] : null;
        $this->container['redirect_url'] = isset($data['redirect_url']) ? $data['redirect_url'] : null;
        $this->container['is_authenticated'] = isset($data['is_authenticated']) ? $data['is_authenticated'] : null;
        $this->container['suppress_header'] = isset($data['suppress_header']) ? $data['suppress_header'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets envelope_id
     *
     * @return string
     */
    public function getEnvelopeId()
    {
        return $this->container['envelope_id'];
    }

    /**
     * Sets envelope_id
     *
     * @param string $envelope_id envelope_id
     *
     * @return $this
     */
    public function setEnvelopeId($envelope_id)
    {
        $this->container['envelope_id'] = $envelope_id;

        return $this;
    }

    /**
     * Gets link_expiration_date
     *
     * @return \DateTime
     */
    public function getLinkExpirationDate()
    {
        return $this->container['link_expiration_date'];
    }

    /**
     * Sets link_expiration_date
     *
     * @param \DateTime $link_expiration_date link_expiration_date
     *
     * @return $this
     */
    public function setLinkExpirationDate($link_expiration_date)
    {
        $this->container['link_expiration_date'] = $link_expiration_date;

        return $this;
    }

    /**
     * Gets include_only_current_signers
     *
     * @return bool
     */
    public function getIncludeOnlyCurrentSigners()
    {
        return $this->container['include_only_current_signers'];
    }

    /**
     * Sets include_only_current_signers
     *
     * @param bool $include_only_current_signers include_only_current_signers
     *
     * @return $this
     */
    public function setIncludeOnlyCurrentSigners($include_only_current_signers)
    {
        $this->container['include_only_current_signers'] = $include_only_current_signers;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string $redirect_url redirect_url
     *
     * @return $this
     */
    public function setRedirectUrl($redirect_url)
    {
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets is_authenticated
     *
     * @return bool
     */
    public function getIsAuthenticated()
    {
        return $this->container['is_authenticated'];
    }

    /**
     * Sets is_authenticated
     *
     * @param bool $is_authenticated is_authenticated
     *
     * @return $this
     */
    public function setIsAuthenticated($is_authenticated)
    {
        $this->container['is_authenticated'] = $is_authenticated;

        return $this;
    }

    /**
     * Gets suppress_header
     *
     * @return bool
     */
    public function getSuppressHeader()
    {
        return $this->container['suppress_header'];
    }

    /**
     * Sets suppress_header
     *
     * @param bool $suppress_header suppress_header
     *
     * @return $this
     */
    public function setSuppressHeader($suppress_header)
    {
        $this->container['suppress_header'] = $suppress_header;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
