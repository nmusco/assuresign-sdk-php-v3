<?php
/**
 * SubmissionWebHook
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)</h3>
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * SubmissionWebHook Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubmissionWebHook implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'submissionWebHook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'designName' => 'string',
        'timing' => 'string',
        'step' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'designName' => null,
        'timing' => null,
        'step' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'designName' => 'designName',
        'timing' => 'timing',
        'step' => 'step'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'designName' => 'setDesignName',
        'timing' => 'setTiming',
        'step' => 'setStep'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'designName' => 'getDesignName',
        'timing' => 'getTiming',
        'step' => 'getStep'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TIMING_ENVELOPE_START = 'Envelope_Start';
    const TIMING_ENVELOPE_PRE_EXPIRE = 'Envelope_PreExpire';
    const TIMING_ENVELOPE_EXPIRE = 'Envelope_Expire';
    const TIMING_ENVELOPE_COMPLETE = 'Envelope_Complete';
    const TIMING_ENVELOPE_CANCEL = 'Envelope_Cancel';
    const TIMING_ENVELOPE_DECLINE = 'Envelope_Decline';
    const TIMING_SIGNER_FEEDBACK = 'Signer_Feedback';
    const TIMING_SIGNER_AUTH_FAILURE = 'Signer_Auth_Failure';
    const TIMING_SIGNER_KBA_START = 'Signer_Kba_Start';
    const TIMING_SIGNER_KBA_COMPLETE = 'Signer_Kba_Complete';
    const TIMING_STEP_START = 'Step_Start';
    const TIMING_STEP_COMPLETE = 'Step_Complete';
    const TIMING_ON_PAYMENT_APPROVED = 'On_Payment_Approved';
    const TIMING_ON_PAYMENT_DECLINED = 'On_Payment_Declined';
    const TIMING_ON_PAYMENT_REFUNDED = 'On_Payment_Refunded';
    const TIMING_ON_ENVELOPE_LANDING_VISIT = 'On_Envelope_Landing_Visit';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimingAllowableValues()
    {
        return [
            self::TIMING_ENVELOPE_START,
            self::TIMING_ENVELOPE_PRE_EXPIRE,
            self::TIMING_ENVELOPE_EXPIRE,
            self::TIMING_ENVELOPE_COMPLETE,
            self::TIMING_ENVELOPE_CANCEL,
            self::TIMING_ENVELOPE_DECLINE,
            self::TIMING_SIGNER_FEEDBACK,
            self::TIMING_SIGNER_AUTH_FAILURE,
            self::TIMING_SIGNER_KBA_START,
            self::TIMING_SIGNER_KBA_COMPLETE,
            self::TIMING_STEP_START,
            self::TIMING_STEP_COMPLETE,
            self::TIMING_ON_PAYMENT_APPROVED,
            self::TIMING_ON_PAYMENT_DECLINED,
            self::TIMING_ON_PAYMENT_REFUNDED,
            self::TIMING_ON_ENVELOPE_LANDING_VISIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['designName'] = isset($data['designName']) ? $data['designName'] : null;
        $this->container['timing'] = isset($data['timing']) ? $data['timing'] : null;
        $this->container['step'] = isset($data['step']) ? $data['step'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTimingAllowableValues();
        if (!is_null($this->container['timing']) && !in_array($this->container['timing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'timing', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets designName
     *
     * @return string|null
     */
    public function getDesignName()
    {
        return $this->container['designName'];
    }

    /**
     * Sets designName
     *
     * @param string|null $designName Specifies the design name of the webhook.
     *
     * @return $this
     */
    public function setDesignName($designName)
    {
        $this->container['designName'] = $designName;

        return $this;
    }

    /**
     * Gets timing
     *
     * @return string|null
     */
    public function getTiming()
    {
        return $this->container['timing'];
    }

    /**
     * Sets timing
     *
     * @param string|null $timing Specifies the stage in the envelope signing process during which the webhook will be executed.
     *
     * @return $this
     */
    public function setTiming($timing)
    {
        $allowedValues = $this->getTimingAllowableValues();
        if (!is_null($timing) && !in_array($timing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'timing', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['timing'] = $timing;

        return $this;
    }

    /**
     * Gets step
     *
     * @return int|null
     */
    public function getStep()
    {
        return $this->container['step'];
    }

    /**
     * Sets step
     *
     * @param int|null $step Specifies the 0-based index of the signing step with which the webhook is associated (StepStart, StepComplete)
     *
     * @return $this
     */
    public function setStep($step)
    {
        $this->container['step'] = $step;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


