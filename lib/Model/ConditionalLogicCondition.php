<?php
/**
 * ConditionalLogicCondition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)</h3>
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * ConditionalLogicCondition Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConditionalLogicCondition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'conditionalLogicCondition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'objectEntityID' => 'string',
        'objectEntityType' => 'string',
        'regex' => 'string',
        'compareType' => 'string',
        'conditionalValue' => 'string',
        'isCaseSensitive' => 'string',
        'trim' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'objectEntityID' => null,
        'objectEntityType' => null,
        'regex' => null,
        'compareType' => null,
        'conditionalValue' => null,
        'isCaseSensitive' => null,
        'trim' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'objectEntityID' => 'objectEntityID',
        'objectEntityType' => 'objectEntityType',
        'regex' => 'regex',
        'compareType' => 'compareType',
        'conditionalValue' => 'conditionalValue',
        'isCaseSensitive' => 'isCaseSensitive',
        'trim' => 'trim'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'objectEntityID' => 'setObjectEntityID',
        'objectEntityType' => 'setObjectEntityType',
        'regex' => 'setRegex',
        'compareType' => 'setCompareType',
        'conditionalValue' => 'setConditionalValue',
        'isCaseSensitive' => 'setIsCaseSensitive',
        'trim' => 'setTrim'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'objectEntityID' => 'getObjectEntityID',
        'objectEntityType' => 'getObjectEntityType',
        'regex' => 'getRegex',
        'compareType' => 'getCompareType',
        'conditionalValue' => 'getConditionalValue',
        'isCaseSensitive' => 'getIsCaseSensitive',
        'trim' => 'getTrim'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OBJECT_ENTITY_TYPE_FIELD = 'Field';
    const OBJECT_ENTITY_TYPE_SIGNER_ATTACHMENT = 'SignerAttachment';
    const OBJECT_ENTITY_TYPE_SIGNER_PAYMENT = 'SignerPayment';
    const COMPARE_TYPE_ANYTHING = 'Anything';
    const COMPARE_TYPE_EQUAL_TO = 'EqualTo';
    const COMPARE_TYPE_NOT_EQUAL_TO = 'NotEqualTo';
    const COMPARE_TYPE_GREATER_THAN = 'GreaterThan';
    const COMPARE_TYPE_LESS_THAN = 'LessThan';
    const COMPARE_TYPE_SKIPPED = 'Skipped';
    const COMPARE_TYPE_ENABLED = 'Enabled';
    const COMPARE_TYPE_REGEX = 'Regex';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectEntityTypeAllowableValues()
    {
        return [
            self::OBJECT_ENTITY_TYPE_FIELD,
            self::OBJECT_ENTITY_TYPE_SIGNER_ATTACHMENT,
            self::OBJECT_ENTITY_TYPE_SIGNER_PAYMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompareTypeAllowableValues()
    {
        return [
            self::COMPARE_TYPE_ANYTHING,
            self::COMPARE_TYPE_EQUAL_TO,
            self::COMPARE_TYPE_NOT_EQUAL_TO,
            self::COMPARE_TYPE_GREATER_THAN,
            self::COMPARE_TYPE_LESS_THAN,
            self::COMPARE_TYPE_SKIPPED,
            self::COMPARE_TYPE_ENABLED,
            self::COMPARE_TYPE_REGEX,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['objectEntityID'] = isset($data['objectEntityID']) ? $data['objectEntityID'] : null;
        $this->container['objectEntityType'] = isset($data['objectEntityType']) ? $data['objectEntityType'] : null;
        $this->container['regex'] = isset($data['regex']) ? $data['regex'] : null;
        $this->container['compareType'] = isset($data['compareType']) ? $data['compareType'] : null;
        $this->container['conditionalValue'] = isset($data['conditionalValue']) ? $data['conditionalValue'] : null;
        $this->container['isCaseSensitive'] = isset($data['isCaseSensitive']) ? $data['isCaseSensitive'] : null;
        $this->container['trim'] = isset($data['trim']) ? $data['trim'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getObjectEntityTypeAllowableValues();
        if (!is_null($this->container['objectEntityType']) && !in_array($this->container['objectEntityType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'objectEntityType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCompareTypeAllowableValues();
        if (!is_null($this->container['compareType']) && !in_array($this->container['compareType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'compareType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets objectEntityID
     *
     * @return string|null
     */
    public function getObjectEntityID()
    {
        return $this->container['objectEntityID'];
    }

    /**
     * Sets objectEntityID
     *
     * @param string|null $objectEntityID objectEntityID
     *
     * @return $this
     */
    public function setObjectEntityID($objectEntityID)
    {
        $this->container['objectEntityID'] = $objectEntityID;

        return $this;
    }

    /**
     * Gets objectEntityType
     *
     * @return string|null
     */
    public function getObjectEntityType()
    {
        return $this->container['objectEntityType'];
    }

    /**
     * Sets objectEntityType
     *
     * @param string|null $objectEntityType objectEntityType
     *
     * @return $this
     */
    public function setObjectEntityType($objectEntityType)
    {
        $allowedValues = $this->getObjectEntityTypeAllowableValues();
        if (!is_null($objectEntityType) && !in_array($objectEntityType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'objectEntityType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['objectEntityType'] = $objectEntityType;

        return $this;
    }

    /**
     * Gets regex
     *
     * @return string|null
     */
    public function getRegex()
    {
        return $this->container['regex'];
    }

    /**
     * Sets regex
     *
     * @param string|null $regex regex
     *
     * @return $this
     */
    public function setRegex($regex)
    {
        $this->container['regex'] = $regex;

        return $this;
    }

    /**
     * Gets compareType
     *
     * @return string|null
     */
    public function getCompareType()
    {
        return $this->container['compareType'];
    }

    /**
     * Sets compareType
     *
     * @param string|null $compareType compareType
     *
     * @return $this
     */
    public function setCompareType($compareType)
    {
        $allowedValues = $this->getCompareTypeAllowableValues();
        if (!is_null($compareType) && !in_array($compareType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'compareType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['compareType'] = $compareType;

        return $this;
    }

    /**
     * Gets conditionalValue
     *
     * @return string|null
     */
    public function getConditionalValue()
    {
        return $this->container['conditionalValue'];
    }

    /**
     * Sets conditionalValue
     *
     * @param string|null $conditionalValue conditionalValue
     *
     * @return $this
     */
    public function setConditionalValue($conditionalValue)
    {
        $this->container['conditionalValue'] = $conditionalValue;

        return $this;
    }

    /**
     * Gets isCaseSensitive
     *
     * @return string|null
     */
    public function getIsCaseSensitive()
    {
        return $this->container['isCaseSensitive'];
    }

    /**
     * Sets isCaseSensitive
     *
     * @param string|null $isCaseSensitive isCaseSensitive
     *
     * @return $this
     */
    public function setIsCaseSensitive($isCaseSensitive)
    {
        $this->container['isCaseSensitive'] = $isCaseSensitive;

        return $this;
    }

    /**
     * Gets trim
     *
     * @return bool|null
     */
    public function getTrim()
    {
        return $this->container['trim'];
    }

    /**
     * Sets trim
     *
     * @param bool|null $trim trim
     *
     * @return $this
     */
    public function setTrim($trim)
    {
        $this->container['trim'] = $trim;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


