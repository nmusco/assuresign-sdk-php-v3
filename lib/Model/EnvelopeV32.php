<?php
/**
 * EnvelopeV32
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)</h3>
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * EnvelopeV32 Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvelopeV32 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'envelopeV3_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cultureType' => 'string',
        'declineBehaviorType' => 'string',
        'downloadPassword' => 'string',
        'expirationDate' => 'string',
        'name' => 'string',
        'orderId' => 'string',
        'signingDeviceEnabled' => 'bool',
        'viewBehaviorType' => 'string',
        'workflowType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cultureType' => null,
        'declineBehaviorType' => null,
        'downloadPassword' => null,
        'expirationDate' => null,
        'name' => null,
        'orderId' => null,
        'signingDeviceEnabled' => null,
        'viewBehaviorType' => null,
        'workflowType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cultureType' => 'cultureType',
        'declineBehaviorType' => 'declineBehaviorType',
        'downloadPassword' => 'downloadPassword',
        'expirationDate' => 'expirationDate',
        'name' => 'name',
        'orderId' => 'orderId',
        'signingDeviceEnabled' => 'signingDeviceEnabled',
        'viewBehaviorType' => 'viewBehaviorType',
        'workflowType' => 'workflowType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cultureType' => 'setCultureType',
        'declineBehaviorType' => 'setDeclineBehaviorType',
        'downloadPassword' => 'setDownloadPassword',
        'expirationDate' => 'setExpirationDate',
        'name' => 'setName',
        'orderId' => 'setOrderId',
        'signingDeviceEnabled' => 'setSigningDeviceEnabled',
        'viewBehaviorType' => 'setViewBehaviorType',
        'workflowType' => 'setWorkflowType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cultureType' => 'getCultureType',
        'declineBehaviorType' => 'getDeclineBehaviorType',
        'downloadPassword' => 'getDownloadPassword',
        'expirationDate' => 'getExpirationDate',
        'name' => 'getName',
        'orderId' => 'getOrderId',
        'signingDeviceEnabled' => 'getSigningDeviceEnabled',
        'viewBehaviorType' => 'getViewBehaviorType',
        'workflowType' => 'getWorkflowType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DECLINE_BEHAVIOR_TYPE_DECLINE_ALL = 'DeclineAll';
    const DECLINE_BEHAVIOR_TYPE_DECLINE_SINGLE = 'DeclineSingle';
    const VIEW_BEHAVIOR_TYPE_VIEW_SIGNATORY_ONLY = 'ViewSignatoryOnly';
    const VIEW_BEHAVIOR_TYPE_VIEW_ALL = 'ViewAll';
    const WORKFLOW_TYPE_SEQUENTIAL = 'Sequential';
    const WORKFLOW_TYPE_PARALLEL = 'Parallel';
    const WORKFLOW_TYPE_CUSTOM = 'Custom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeclineBehaviorTypeAllowableValues()
    {
        return [
            self::DECLINE_BEHAVIOR_TYPE_DECLINE_ALL,
            self::DECLINE_BEHAVIOR_TYPE_DECLINE_SINGLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViewBehaviorTypeAllowableValues()
    {
        return [
            self::VIEW_BEHAVIOR_TYPE_VIEW_SIGNATORY_ONLY,
            self::VIEW_BEHAVIOR_TYPE_VIEW_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWorkflowTypeAllowableValues()
    {
        return [
            self::WORKFLOW_TYPE_SEQUENTIAL,
            self::WORKFLOW_TYPE_PARALLEL,
            self::WORKFLOW_TYPE_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cultureType'] = isset($data['cultureType']) ? $data['cultureType'] : null;
        $this->container['declineBehaviorType'] = isset($data['declineBehaviorType']) ? $data['declineBehaviorType'] : null;
        $this->container['downloadPassword'] = isset($data['downloadPassword']) ? $data['downloadPassword'] : null;
        $this->container['expirationDate'] = isset($data['expirationDate']) ? $data['expirationDate'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['signingDeviceEnabled'] = isset($data['signingDeviceEnabled']) ? $data['signingDeviceEnabled'] : null;
        $this->container['viewBehaviorType'] = isset($data['viewBehaviorType']) ? $data['viewBehaviorType'] : null;
        $this->container['workflowType'] = isset($data['workflowType']) ? $data['workflowType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeclineBehaviorTypeAllowableValues();
        if (!is_null($this->container['declineBehaviorType']) && !in_array($this->container['declineBehaviorType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'declineBehaviorType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getViewBehaviorTypeAllowableValues();
        if (!is_null($this->container['viewBehaviorType']) && !in_array($this->container['viewBehaviorType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'viewBehaviorType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWorkflowTypeAllowableValues();
        if (!is_null($this->container['workflowType']) && !in_array($this->container['workflowType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'workflowType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cultureType
     *
     * @return string|null
     */
    public function getCultureType()
    {
        return $this->container['cultureType'];
    }

    /**
     * Sets cultureType
     *
     * @param string|null $cultureType Specifies the target culture for the signing session.  Possible values include &apos;en-US&apos; (English - US), &apos;es-US&apos; (Spanish - US), and &apos;fr-CA&apos; (French - Canada).  Note that specifying a culture here will control the language displayed to signers and the language of default email and SMS notifications. It will not, however, provide automatic translation of the contents of the documents within the envelope or for any adhoc notifications provided in the submission.
     *
     * @return $this
     */
    public function setCultureType($cultureType)
    {
        $this->container['cultureType'] = $cultureType;

        return $this;
    }

    /**
     * Gets declineBehaviorType
     *
     * @return string|null
     */
    public function getDeclineBehaviorType()
    {
        return $this->container['declineBehaviorType'];
    }

    /**
     * Sets declineBehaviorType
     *
     * @param string|null $declineBehaviorType Specifies whether signers will be given the option to decline signing for individual documents within the envelope or just to decline the envelope as a whole.
     *
     * @return $this
     */
    public function setDeclineBehaviorType($declineBehaviorType)
    {
        $allowedValues = $this->getDeclineBehaviorTypeAllowableValues();
        if (!is_null($declineBehaviorType) && !in_array($declineBehaviorType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'declineBehaviorType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['declineBehaviorType'] = $declineBehaviorType;

        return $this;
    }

    /**
     * Gets downloadPassword
     *
     * @return string|null
     */
    public function getDownloadPassword()
    {
        return $this->container['downloadPassword'];
    }

    /**
     * Sets downloadPassword
     *
     * @param string|null $downloadPassword Specifies a password that users or notification recipients will be prompted to enter in order to access downloads for the envelope.
     *
     * @return $this
     */
    public function setDownloadPassword($downloadPassword)
    {
        $this->container['downloadPassword'] = $downloadPassword;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param string|null $expirationDate Optionally specifies the date when the envelope will expire if not completed.  If an expiration date is not provided, the expiration date will be automatically set based on the expiration policy configured for the account.
     *
     * @return $this
     */
    public function setExpirationDate($expirationDate)
    {
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Specifies the name of the envelope.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string|null $orderId Optionally specifies an order ID or order number to help identify the document.
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets signingDeviceEnabled
     *
     * @return bool|null
     */
    public function getSigningDeviceEnabled()
    {
        return $this->container['signingDeviceEnabled'];
    }

    /**
     * Sets signingDeviceEnabled
     *
     * @param bool|null $signingDeviceEnabled Specifies whether or not support for external signing devices should be enabled for the envelope.
     *
     * @return $this
     */
    public function setSigningDeviceEnabled($signingDeviceEnabled)
    {
        $this->container['signingDeviceEnabled'] = $signingDeviceEnabled;

        return $this;
    }

    /**
     * Gets viewBehaviorType
     *
     * @return string|null
     */
    public function getViewBehaviorType()
    {
        return $this->container['viewBehaviorType'];
    }

    /**
     * Sets viewBehaviorType
     *
     * @param string|null $viewBehaviorType Specifies whether signers will be able to see all documents within the envelope or just documents for which they are a signing party.
     *
     * @return $this
     */
    public function setViewBehaviorType($viewBehaviorType)
    {
        $allowedValues = $this->getViewBehaviorTypeAllowableValues();
        if (!is_null($viewBehaviorType) && !in_array($viewBehaviorType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'viewBehaviorType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['viewBehaviorType'] = $viewBehaviorType;

        return $this;
    }

    /**
     * Gets workflowType
     *
     * @return string|null
     */
    public function getWorkflowType()
    {
        return $this->container['workflowType'];
    }

    /**
     * Sets workflowType
     *
     * @param string|null $workflowType Specifies whether the workflow for the envelope will make signing available to all signers at the same time or if signing will be made available to signers one at a time.
     *
     * @return $this
     */
    public function setWorkflowType($workflowType)
    {
        $allowedValues = $this->getWorkflowTypeAllowableValues();
        if (!is_null($workflowType) && !in_array($workflowType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'workflowType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['workflowType'] = $workflowType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


