<?php
/**
 * EnvelopeApi
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)</h3>
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nmusco\AssureSign\v3\ApiException;
use Nmusco\AssureSign\v3\Configuration;
use Nmusco\AssureSign\v3\HeaderSelector;
use Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * EnvelopeApi Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvelopeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelEnvelope
     *
     * Cancel an active envelope
     *
     * @param  string $envelopeID envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject $inlineObject inlineObject (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object
     */
    public function cancelEnvelope($envelopeID, $inlineObject, $xASUserContext = null)
    {
        list($response) = $this->cancelEnvelopeWithHttpInfo($envelopeID, $inlineObject, $xASUserContext);
        return $response;
    }

    /**
     * Operation cancelEnvelopeWithHttpInfo
     *
     * Cancel an active envelope
     *
     * @param  string $envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject $inlineObject (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelEnvelopeWithHttpInfo($envelopeID, $inlineObject, $xASUserContext = null)
    {
        $request = $this->cancelEnvelopeRequest($envelopeID, $inlineObject, $xASUserContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelEnvelopeAsync
     *
     * Cancel an active envelope
     *
     * @param  string $envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject $inlineObject (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelEnvelopeAsync($envelopeID, $inlineObject, $xASUserContext = null)
    {
        return $this->cancelEnvelopeAsyncWithHttpInfo($envelopeID, $inlineObject, $xASUserContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelEnvelopeAsyncWithHttpInfo
     *
     * Cancel an active envelope
     *
     * @param  string $envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject $inlineObject (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelEnvelopeAsyncWithHttpInfo($envelopeID, $inlineObject, $xASUserContext = null)
    {
        $returnType = 'object';
        $request = $this->cancelEnvelopeRequest($envelopeID, $inlineObject, $xASUserContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelEnvelope'
     *
     * @param  string $envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject $inlineObject (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelEnvelopeRequest($envelopeID, $inlineObject, $xASUserContext = null)
    {
        // verify the required parameter 'envelopeID' is set
        if ($envelopeID === null || (is_array($envelopeID) && count($envelopeID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeID when calling cancelEnvelope'
            );
        }
        // verify the required parameter 'inlineObject' is set
        if ($inlineObject === null || (is_array($inlineObject) && count($inlineObject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inlineObject when calling cancelEnvelope'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }

        // path params
        if ($envelopeID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelopeID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($inlineObject)) {
            $_tempBody = $inlineObject;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadEnvelope
     *
     * Download a completed envelope
     *
     * @param  string $envelopeID envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject1 $inlineObject1 inlineObject1 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object
     */
    public function downloadEnvelope($envelopeID, $inlineObject1, $xASUserContext = null)
    {
        list($response) = $this->downloadEnvelopeWithHttpInfo($envelopeID, $inlineObject1, $xASUserContext);
        return $response;
    }

    /**
     * Operation downloadEnvelopeWithHttpInfo
     *
     * Download a completed envelope
     *
     * @param  string $envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject1 $inlineObject1 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadEnvelopeWithHttpInfo($envelopeID, $inlineObject1, $xASUserContext = null)
    {
        $request = $this->downloadEnvelopeRequest($envelopeID, $inlineObject1, $xASUserContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadEnvelopeAsync
     *
     * Download a completed envelope
     *
     * @param  string $envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject1 $inlineObject1 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadEnvelopeAsync($envelopeID, $inlineObject1, $xASUserContext = null)
    {
        return $this->downloadEnvelopeAsyncWithHttpInfo($envelopeID, $inlineObject1, $xASUserContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadEnvelopeAsyncWithHttpInfo
     *
     * Download a completed envelope
     *
     * @param  string $envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject1 $inlineObject1 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadEnvelopeAsyncWithHttpInfo($envelopeID, $inlineObject1, $xASUserContext = null)
    {
        $returnType = 'object';
        $request = $this->downloadEnvelopeRequest($envelopeID, $inlineObject1, $xASUserContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadEnvelope'
     *
     * @param  string $envelopeID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject1 $inlineObject1 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadEnvelopeRequest($envelopeID, $inlineObject1, $xASUserContext = null)
    {
        // verify the required parameter 'envelopeID' is set
        if ($envelopeID === null || (is_array($envelopeID) && count($envelopeID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeID when calling downloadEnvelope'
            );
        }
        // verify the required parameter 'inlineObject1' is set
        if ($inlineObject1 === null || (is_array($inlineObject1) && count($inlineObject1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inlineObject1 when calling downloadEnvelope'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }

        // path params
        if ($envelopeID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelopeID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($inlineObject1)) {
            $_tempBody = $inlineObject1;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation envelopeHistory
     *
     * Get envelope history
     *
     * @param  string $envelopeID envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object
     */
    public function envelopeHistory($envelopeID, $xASUserContext = null)
    {
        list($response) = $this->envelopeHistoryWithHttpInfo($envelopeID, $xASUserContext);
        return $response;
    }

    /**
     * Operation envelopeHistoryWithHttpInfo
     *
     * Get envelope history
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function envelopeHistoryWithHttpInfo($envelopeID, $xASUserContext = null)
    {
        $request = $this->envelopeHistoryRequest($envelopeID, $xASUserContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation envelopeHistoryAsync
     *
     * Get envelope history
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeHistoryAsync($envelopeID, $xASUserContext = null)
    {
        return $this->envelopeHistoryAsyncWithHttpInfo($envelopeID, $xASUserContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation envelopeHistoryAsyncWithHttpInfo
     *
     * Get envelope history
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeHistoryAsyncWithHttpInfo($envelopeID, $xASUserContext = null)
    {
        $returnType = 'object';
        $request = $this->envelopeHistoryRequest($envelopeID, $xASUserContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'envelopeHistory'
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function envelopeHistoryRequest($envelopeID, $xASUserContext = null)
    {
        // verify the required parameter 'envelopeID' is set
        if ($envelopeID === null || (is_array($envelopeID) && count($envelopeID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeID when calling envelopeHistory'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }

        // path params
        if ($envelopeID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelopeID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation envelopeStatus
     *
     * Get envelope status
     *
     * @param  string $envelopeID envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object
     */
    public function envelopeStatus($envelopeID, $xASUserContext = null)
    {
        list($response) = $this->envelopeStatusWithHttpInfo($envelopeID, $xASUserContext);
        return $response;
    }

    /**
     * Operation envelopeStatusWithHttpInfo
     *
     * Get envelope status
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function envelopeStatusWithHttpInfo($envelopeID, $xASUserContext = null)
    {
        $request = $this->envelopeStatusRequest($envelopeID, $xASUserContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation envelopeStatusAsync
     *
     * Get envelope status
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeStatusAsync($envelopeID, $xASUserContext = null)
    {
        return $this->envelopeStatusAsyncWithHttpInfo($envelopeID, $xASUserContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation envelopeStatusAsyncWithHttpInfo
     *
     * Get envelope status
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeStatusAsyncWithHttpInfo($envelopeID, $xASUserContext = null)
    {
        $returnType = 'object';
        $request = $this->envelopeStatusRequest($envelopeID, $xASUserContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'envelopeStatus'
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function envelopeStatusRequest($envelopeID, $xASUserContext = null)
    {
        // verify the required parameter 'envelopeID' is set
        if ($envelopeID === null || (is_array($envelopeID) && count($envelopeID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeID when calling envelopeStatus'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }

        // path params
        if ($envelopeID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelopeID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessLinks
     *
     * Get access links for a specific user in an envelope
     *
     * @param  string $envelopeID envelopeID (required)
     * @param  string $documentType documentType (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signerEmail signerEmail (optional)
     * @param  string $signerMobilePhone signerMobilePhone (optional)
     * @param  string $linkExpirationDate linkExpirationDate (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object
     */
    public function getAccessLinks($envelopeID, $documentType, $xASUserContext = null, $signerEmail = null, $signerMobilePhone = null, $linkExpirationDate = null)
    {
        list($response) = $this->getAccessLinksWithHttpInfo($envelopeID, $documentType, $xASUserContext, $signerEmail, $signerMobilePhone, $linkExpirationDate);
        return $response;
    }

    /**
     * Operation getAccessLinksWithHttpInfo
     *
     * Get access links for a specific user in an envelope
     *
     * @param  string $envelopeID (required)
     * @param  string $documentType (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signerEmail (optional)
     * @param  string $signerMobilePhone (optional)
     * @param  string $linkExpirationDate (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessLinksWithHttpInfo($envelopeID, $documentType, $xASUserContext = null, $signerEmail = null, $signerMobilePhone = null, $linkExpirationDate = null)
    {
        $request = $this->getAccessLinksRequest($envelopeID, $documentType, $xASUserContext, $signerEmail, $signerMobilePhone, $linkExpirationDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessLinksAsync
     *
     * Get access links for a specific user in an envelope
     *
     * @param  string $envelopeID (required)
     * @param  string $documentType (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signerEmail (optional)
     * @param  string $signerMobilePhone (optional)
     * @param  string $linkExpirationDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessLinksAsync($envelopeID, $documentType, $xASUserContext = null, $signerEmail = null, $signerMobilePhone = null, $linkExpirationDate = null)
    {
        return $this->getAccessLinksAsyncWithHttpInfo($envelopeID, $documentType, $xASUserContext, $signerEmail, $signerMobilePhone, $linkExpirationDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccessLinksAsyncWithHttpInfo
     *
     * Get access links for a specific user in an envelope
     *
     * @param  string $envelopeID (required)
     * @param  string $documentType (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signerEmail (optional)
     * @param  string $signerMobilePhone (optional)
     * @param  string $linkExpirationDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessLinksAsyncWithHttpInfo($envelopeID, $documentType, $xASUserContext = null, $signerEmail = null, $signerMobilePhone = null, $linkExpirationDate = null)
    {
        $returnType = 'object';
        $request = $this->getAccessLinksRequest($envelopeID, $documentType, $xASUserContext, $signerEmail, $signerMobilePhone, $linkExpirationDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessLinks'
     *
     * @param  string $envelopeID (required)
     * @param  string $documentType (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signerEmail (optional)
     * @param  string $signerMobilePhone (optional)
     * @param  string $linkExpirationDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccessLinksRequest($envelopeID, $documentType, $xASUserContext = null, $signerEmail = null, $signerMobilePhone = null, $linkExpirationDate = null)
    {
        // verify the required parameter 'envelopeID' is set
        if ($envelopeID === null || (is_array($envelopeID) && count($envelopeID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeID when calling getAccessLinks'
            );
        }
        // verify the required parameter 'documentType' is set
        if ($documentType === null || (is_array($documentType) && count($documentType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentType when calling getAccessLinks'
            );
        }

        $resourcePath = '/envelope/{envelopeID}/accessLinks/{documentType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($signerEmail !== null) {
            $queryParams['signerEmail'] = ObjectSerializer::toQueryValue($signerEmail);
        }
        // query params
        if ($signerMobilePhone !== null) {
            $queryParams['signerMobilePhone'] = ObjectSerializer::toQueryValue($signerMobilePhone);
        }
        // query params
        if ($linkExpirationDate !== null) {
            $queryParams['linkExpirationDate'] = ObjectSerializer::toQueryValue($linkExpirationDate);
        }
        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }

        // path params
        if ($envelopeID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelopeID),
                $resourcePath
            );
        }
        // path params
        if ($documentType !== null) {
            $resourcePath = str_replace(
                '{' . 'documentType' . '}',
                ObjectSerializer::toPathValue($documentType),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelope
     *
     * Envelope data
     *
     * @param  string $envelopeID envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object
     */
    public function getEnvelope($envelopeID, $xASUserContext = null)
    {
        list($response) = $this->getEnvelopeWithHttpInfo($envelopeID, $xASUserContext);
        return $response;
    }

    /**
     * Operation getEnvelopeWithHttpInfo
     *
     * Envelope data
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeWithHttpInfo($envelopeID, $xASUserContext = null)
    {
        $request = $this->getEnvelopeRequest($envelopeID, $xASUserContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeAsync
     *
     * Envelope data
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeAsync($envelopeID, $xASUserContext = null)
    {
        return $this->getEnvelopeAsyncWithHttpInfo($envelopeID, $xASUserContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeAsyncWithHttpInfo
     *
     * Envelope data
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeAsyncWithHttpInfo($envelopeID, $xASUserContext = null)
    {
        $returnType = 'object';
        $request = $this->getEnvelopeRequest($envelopeID, $xASUserContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelope'
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeRequest($envelopeID, $xASUserContext = null)
    {
        // verify the required parameter 'envelopeID' is set
        if ($envelopeID === null || (is_array($envelopeID) && count($envelopeID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeID when calling getEnvelope'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }

        // path params
        if ($envelopeID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelopeID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelopeValues
     *
     * Get a list of field (JotBlock) values for an envelope
     *
     * @param  string $envelopeID envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getEnvelopeValues($envelopeID, $xASUserContext = null)
    {
        list($response) = $this->getEnvelopeValuesWithHttpInfo($envelopeID, $xASUserContext);
        return $response;
    }

    /**
     * Operation getEnvelopeValuesWithHttpInfo
     *
     * Get a list of field (JotBlock) values for an envelope
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeValuesWithHttpInfo($envelopeID, $xASUserContext = null)
    {
        $request = $this->getEnvelopeValuesRequest($envelopeID, $xASUserContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeValuesAsync
     *
     * Get a list of field (JotBlock) values for an envelope
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeValuesAsync($envelopeID, $xASUserContext = null)
    {
        return $this->getEnvelopeValuesAsyncWithHttpInfo($envelopeID, $xASUserContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeValuesAsyncWithHttpInfo
     *
     * Get a list of field (JotBlock) values for an envelope
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeValuesAsyncWithHttpInfo($envelopeID, $xASUserContext = null)
    {
        $returnType = 'object';
        $request = $this->getEnvelopeValuesRequest($envelopeID, $xASUserContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelopeValues'
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeValuesRequest($envelopeID, $xASUserContext = null)
    {
        // verify the required parameter 'envelopeID' is set
        if ($envelopeID === null || (is_array($envelopeID) && count($envelopeID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeID when calling getEnvelopeValues'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }

        // path params
        if ($envelopeID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelopeID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSigningLinks
     *
     * Get signing links for envelope signers
     *
     * @param  string $envelopeID envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $includeOnlyCurrentSigners includeOnlyCurrentSigners (optional)
     * @param  bool $isAuthenticated isAuthenticated (optional)
     * @param  string $redirectUrl redirectUrl (optional)
     * @param  string $linkExpirationDate linkExpirationDate (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object
     */
    public function getSigningLinks($envelopeID, $xASUserContext = null, $includeOnlyCurrentSigners = null, $isAuthenticated = null, $redirectUrl = null, $linkExpirationDate = null)
    {
        list($response) = $this->getSigningLinksWithHttpInfo($envelopeID, $xASUserContext, $includeOnlyCurrentSigners, $isAuthenticated, $redirectUrl, $linkExpirationDate);
        return $response;
    }

    /**
     * Operation getSigningLinksWithHttpInfo
     *
     * Get signing links for envelope signers
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $includeOnlyCurrentSigners (optional)
     * @param  bool $isAuthenticated (optional)
     * @param  string $redirectUrl (optional)
     * @param  string $linkExpirationDate (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSigningLinksWithHttpInfo($envelopeID, $xASUserContext = null, $includeOnlyCurrentSigners = null, $isAuthenticated = null, $redirectUrl = null, $linkExpirationDate = null)
    {
        $request = $this->getSigningLinksRequest($envelopeID, $xASUserContext, $includeOnlyCurrentSigners, $isAuthenticated, $redirectUrl, $linkExpirationDate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSigningLinksAsync
     *
     * Get signing links for envelope signers
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $includeOnlyCurrentSigners (optional)
     * @param  bool $isAuthenticated (optional)
     * @param  string $redirectUrl (optional)
     * @param  string $linkExpirationDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSigningLinksAsync($envelopeID, $xASUserContext = null, $includeOnlyCurrentSigners = null, $isAuthenticated = null, $redirectUrl = null, $linkExpirationDate = null)
    {
        return $this->getSigningLinksAsyncWithHttpInfo($envelopeID, $xASUserContext, $includeOnlyCurrentSigners, $isAuthenticated, $redirectUrl, $linkExpirationDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSigningLinksAsyncWithHttpInfo
     *
     * Get signing links for envelope signers
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $includeOnlyCurrentSigners (optional)
     * @param  bool $isAuthenticated (optional)
     * @param  string $redirectUrl (optional)
     * @param  string $linkExpirationDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSigningLinksAsyncWithHttpInfo($envelopeID, $xASUserContext = null, $includeOnlyCurrentSigners = null, $isAuthenticated = null, $redirectUrl = null, $linkExpirationDate = null)
    {
        $returnType = 'object';
        $request = $this->getSigningLinksRequest($envelopeID, $xASUserContext, $includeOnlyCurrentSigners, $isAuthenticated, $redirectUrl, $linkExpirationDate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSigningLinks'
     *
     * @param  string $envelopeID (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $includeOnlyCurrentSigners (optional)
     * @param  bool $isAuthenticated (optional)
     * @param  string $redirectUrl (optional)
     * @param  string $linkExpirationDate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSigningLinksRequest($envelopeID, $xASUserContext = null, $includeOnlyCurrentSigners = null, $isAuthenticated = null, $redirectUrl = null, $linkExpirationDate = null)
    {
        // verify the required parameter 'envelopeID' is set
        if ($envelopeID === null || (is_array($envelopeID) && count($envelopeID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeID when calling getSigningLinks'
            );
        }

        $resourcePath = '/envelope/{envelopeID}/signingLinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeOnlyCurrentSigners !== null) {
            $queryParams['includeOnlyCurrentSigners'] = ObjectSerializer::toQueryValue($includeOnlyCurrentSigners);
        }
        // query params
        if ($isAuthenticated !== null) {
            $queryParams['isAuthenticated'] = ObjectSerializer::toQueryValue($isAuthenticated);
        }
        // query params
        if ($redirectUrl !== null) {
            $queryParams['redirectUrl'] = ObjectSerializer::toQueryValue($redirectUrl);
        }
        // query params
        if ($linkExpirationDate !== null) {
            $queryParams['linkExpirationDate'] = ObjectSerializer::toQueryValue($linkExpirationDate);
        }
        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }

        // path params
        if ($envelopeID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelopeID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listEnvelopes
     *
     * Get envelopes matching given criteria
     *
     * @param  string $dateFilter dateFilter (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelopeName envelopeName (optional)
     * @param  string $signerName signerName (optional)
     * @param  string $orderID orderID (optional)
     * @param  string $emailAddress emailAddress (optional)
     * @param  string $mobilePhone mobilePhone (optional)
     * @param  string $fromDate fromDate (optional)
     * @param  string $toDate toDate (optional)
     * @param  bool $queryChildAccounts queryChildAccounts (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object
     */
    public function listEnvelopes($dateFilter, $xASUserContext = null, $envelopeName = null, $signerName = null, $orderID = null, $emailAddress = null, $mobilePhone = null, $fromDate = null, $toDate = null, $queryChildAccounts = null)
    {
        list($response) = $this->listEnvelopesWithHttpInfo($dateFilter, $xASUserContext, $envelopeName, $signerName, $orderID, $emailAddress, $mobilePhone, $fromDate, $toDate, $queryChildAccounts);
        return $response;
    }

    /**
     * Operation listEnvelopesWithHttpInfo
     *
     * Get envelopes matching given criteria
     *
     * @param  string $dateFilter (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelopeName (optional)
     * @param  string $signerName (optional)
     * @param  string $orderID (optional)
     * @param  string $emailAddress (optional)
     * @param  string $mobilePhone (optional)
     * @param  string $fromDate (optional)
     * @param  string $toDate (optional)
     * @param  bool $queryChildAccounts (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function listEnvelopesWithHttpInfo($dateFilter, $xASUserContext = null, $envelopeName = null, $signerName = null, $orderID = null, $emailAddress = null, $mobilePhone = null, $fromDate = null, $toDate = null, $queryChildAccounts = null)
    {
        $request = $this->listEnvelopesRequest($dateFilter, $xASUserContext, $envelopeName, $signerName, $orderID, $emailAddress, $mobilePhone, $fromDate, $toDate, $queryChildAccounts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listEnvelopesAsync
     *
     * Get envelopes matching given criteria
     *
     * @param  string $dateFilter (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelopeName (optional)
     * @param  string $signerName (optional)
     * @param  string $orderID (optional)
     * @param  string $emailAddress (optional)
     * @param  string $mobilePhone (optional)
     * @param  string $fromDate (optional)
     * @param  string $toDate (optional)
     * @param  bool $queryChildAccounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEnvelopesAsync($dateFilter, $xASUserContext = null, $envelopeName = null, $signerName = null, $orderID = null, $emailAddress = null, $mobilePhone = null, $fromDate = null, $toDate = null, $queryChildAccounts = null)
    {
        return $this->listEnvelopesAsyncWithHttpInfo($dateFilter, $xASUserContext, $envelopeName, $signerName, $orderID, $emailAddress, $mobilePhone, $fromDate, $toDate, $queryChildAccounts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listEnvelopesAsyncWithHttpInfo
     *
     * Get envelopes matching given criteria
     *
     * @param  string $dateFilter (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelopeName (optional)
     * @param  string $signerName (optional)
     * @param  string $orderID (optional)
     * @param  string $emailAddress (optional)
     * @param  string $mobilePhone (optional)
     * @param  string $fromDate (optional)
     * @param  string $toDate (optional)
     * @param  bool $queryChildAccounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEnvelopesAsyncWithHttpInfo($dateFilter, $xASUserContext = null, $envelopeName = null, $signerName = null, $orderID = null, $emailAddress = null, $mobilePhone = null, $fromDate = null, $toDate = null, $queryChildAccounts = null)
    {
        $returnType = 'object';
        $request = $this->listEnvelopesRequest($dateFilter, $xASUserContext, $envelopeName, $signerName, $orderID, $emailAddress, $mobilePhone, $fromDate, $toDate, $queryChildAccounts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listEnvelopes'
     *
     * @param  string $dateFilter (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelopeName (optional)
     * @param  string $signerName (optional)
     * @param  string $orderID (optional)
     * @param  string $emailAddress (optional)
     * @param  string $mobilePhone (optional)
     * @param  string $fromDate (optional)
     * @param  string $toDate (optional)
     * @param  bool $queryChildAccounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listEnvelopesRequest($dateFilter, $xASUserContext = null, $envelopeName = null, $signerName = null, $orderID = null, $emailAddress = null, $mobilePhone = null, $fromDate = null, $toDate = null, $queryChildAccounts = null)
    {
        // verify the required parameter 'dateFilter' is set
        if ($dateFilter === null || (is_array($dateFilter) && count($dateFilter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateFilter when calling listEnvelopes'
            );
        }

        $resourcePath = '/envelopes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dateFilter !== null) {
            $queryParams['dateFilter'] = ObjectSerializer::toQueryValue($dateFilter);
        }
        // query params
        if ($envelopeName !== null) {
            $queryParams['envelopeName'] = ObjectSerializer::toQueryValue($envelopeName);
        }
        // query params
        if ($signerName !== null) {
            $queryParams['signerName'] = ObjectSerializer::toQueryValue($signerName);
        }
        // query params
        if ($orderID !== null) {
            $queryParams['orderID'] = ObjectSerializer::toQueryValue($orderID);
        }
        // query params
        if ($emailAddress !== null) {
            $queryParams['emailAddress'] = ObjectSerializer::toQueryValue($emailAddress);
        }
        // query params
        if ($mobilePhone !== null) {
            $queryParams['mobilePhone'] = ObjectSerializer::toQueryValue($mobilePhone);
        }
        // query params
        if ($fromDate !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($fromDate);
        }
        // query params
        if ($toDate !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($toDate);
        }
        // query params
        if ($queryChildAccounts !== null) {
            $queryParams['queryChildAccounts'] = ObjectSerializer::toQueryValue($queryChildAccounts);
        }
        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEnvelopeSigner
     *
     * Update envelope signer name, email, mobile phone, and password
     *
     * @param  string $envelopeID envelopeID (required)
     * @param  string $envelopeSignerID envelopeSignerID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject2 $inlineObject2 inlineObject2 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|object
     */
    public function updateEnvelopeSigner($envelopeID, $envelopeSignerID, $inlineObject2, $xASUserContext = null)
    {
        list($response) = $this->updateEnvelopeSignerWithHttpInfo($envelopeID, $envelopeSignerID, $inlineObject2, $xASUserContext);
        return $response;
    }

    /**
     * Operation updateEnvelopeSignerWithHttpInfo
     *
     * Update envelope signer name, email, mobile phone, and password
     *
     * @param  string $envelopeID (required)
     * @param  string $envelopeSignerID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject2 $inlineObject2 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEnvelopeSignerWithHttpInfo($envelopeID, $envelopeSignerID, $inlineObject2, $xASUserContext = null)
    {
        $request = $this->updateEnvelopeSignerRequest($envelopeID, $envelopeSignerID, $inlineObject2, $xASUserContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEnvelopeSignerAsync
     *
     * Update envelope signer name, email, mobile phone, and password
     *
     * @param  string $envelopeID (required)
     * @param  string $envelopeSignerID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject2 $inlineObject2 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeSignerAsync($envelopeID, $envelopeSignerID, $inlineObject2, $xASUserContext = null)
    {
        return $this->updateEnvelopeSignerAsyncWithHttpInfo($envelopeID, $envelopeSignerID, $inlineObject2, $xASUserContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEnvelopeSignerAsyncWithHttpInfo
     *
     * Update envelope signer name, email, mobile phone, and password
     *
     * @param  string $envelopeID (required)
     * @param  string $envelopeSignerID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject2 $inlineObject2 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeSignerAsyncWithHttpInfo($envelopeID, $envelopeSignerID, $inlineObject2, $xASUserContext = null)
    {
        $returnType = 'object';
        $request = $this->updateEnvelopeSignerRequest($envelopeID, $envelopeSignerID, $inlineObject2, $xASUserContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEnvelopeSigner'
     *
     * @param  string $envelopeID (required)
     * @param  string $envelopeSignerID (required)
     * @param  \Nmusco\AssureSign\v3\Model\InlineObject2 $inlineObject2 (required)
     * @param  string $xASUserContext {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEnvelopeSignerRequest($envelopeID, $envelopeSignerID, $inlineObject2, $xASUserContext = null)
    {
        // verify the required parameter 'envelopeID' is set
        if ($envelopeID === null || (is_array($envelopeID) && count($envelopeID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeID when calling updateEnvelopeSigner'
            );
        }
        // verify the required parameter 'envelopeSignerID' is set
        if ($envelopeSignerID === null || (is_array($envelopeSignerID) && count($envelopeSignerID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelopeSignerID when calling updateEnvelopeSigner'
            );
        }
        // verify the required parameter 'inlineObject2' is set
        if ($inlineObject2 === null || (is_array($inlineObject2) && count($inlineObject2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inlineObject2 when calling updateEnvelopeSigner'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/signers/{envelopeSignerID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($xASUserContext !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($xASUserContext);
        }

        // path params
        if ($envelopeID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelopeID),
                $resourcePath
            );
        }
        // path params
        if ($envelopeSignerID !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeSignerID' . '}',
                ObjectSerializer::toPathValue($envelopeSignerID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($inlineObject2)) {
            $_tempBody = $inlineObject2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
