<?php
/**
 * EnvelopeDocumentStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)</h3>
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * EnvelopeDocumentStatus Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvelopeDocumentStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'envelopeDocumentStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'statusDate' => '\DateTime',
        'statusType' => 'string',
        'statusDetails' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'statusDate' => 'date-time',
        'statusType' => null,
        'statusDetails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'statusDate' => 'statusDate',
        'statusType' => 'statusType',
        'statusDetails' => 'statusDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'statusDate' => 'setStatusDate',
        'statusType' => 'setStatusType',
        'statusDetails' => 'setStatusDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'statusDate' => 'getStatusDate',
        'statusType' => 'getStatusType',
        'statusDetails' => 'getStatusDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_TYPE_CREATED = 'CREATED';
    const STATUS_TYPE_SIGNING_STEP_PROGRESS = 'SIGNING_STEP_PROGRESS';
    const STATUS_TYPE_COMPLETED = 'COMPLETED';
    const STATUS_TYPE_EXPIRED = 'EXPIRED';
    const STATUS_TYPE_DECLINED = 'DECLINED';
    const STATUS_TYPE_CANCELLED = 'CANCELLED';
    const STATUS_TYPE_SIGNER_AUTHENTICATION_FAILED = 'SIGNER_AUTHENTICATION_FAILED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusTypeAllowableValues()
    {
        return [
            self::STATUS_TYPE_CREATED,
            self::STATUS_TYPE_SIGNING_STEP_PROGRESS,
            self::STATUS_TYPE_COMPLETED,
            self::STATUS_TYPE_EXPIRED,
            self::STATUS_TYPE_DECLINED,
            self::STATUS_TYPE_CANCELLED,
            self::STATUS_TYPE_SIGNER_AUTHENTICATION_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['statusDate'] = isset($data['statusDate']) ? $data['statusDate'] : null;
        $this->container['statusType'] = isset($data['statusType']) ? $data['statusType'] : null;
        $this->container['statusDetails'] = isset($data['statusDetails']) ? $data['statusDetails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusTypeAllowableValues();
        if (!is_null($this->container['statusType']) && !in_array($this->container['statusType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'statusType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets statusDate
     *
     * @return \DateTime|null
     */
    public function getStatusDate()
    {
        return $this->container['statusDate'];
    }

    /**
     * Sets statusDate
     *
     * @param \DateTime|null $statusDate statusDate
     *
     * @return $this
     */
    public function setStatusDate($statusDate)
    {
        $this->container['statusDate'] = $statusDate;

        return $this;
    }

    /**
     * Gets statusType
     *
     * @return string|null
     */
    public function getStatusType()
    {
        return $this->container['statusType'];
    }

    /**
     * Sets statusType
     *
     * @param string|null $statusType statusType
     *
     * @return $this
     */
    public function setStatusType($statusType)
    {
        $allowedValues = $this->getStatusTypeAllowableValues();
        if (!is_null($statusType) && !in_array($statusType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'statusType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['statusType'] = $statusType;

        return $this;
    }

    /**
     * Gets statusDetails
     *
     * @return string|null
     */
    public function getStatusDetails()
    {
        return $this->container['statusDetails'];
    }

    /**
     * Sets statusDetails
     *
     * @param string|null $statusDetails statusDetails
     *
     * @return $this
     */
    public function setStatusDetails($statusDetails)
    {
        $this->container['statusDetails'] = $statusDetails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


