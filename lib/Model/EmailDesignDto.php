<?php
/**
 * EmailDesignDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  AssureSign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://localhost:44304/api/v3.6/account)</h3>
 *
 * OpenAPI spec version: 3.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * EmailDesignDto Class Doc Comment
 *
 * @category Class
 * @package  AssureSign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailDesignDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'emailDesignDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'body' => 'string',
'date_created' => '\DateTime',
'date_modified' => '\DateTime',
'default_recipients' => 'string',
'default_timing' => 'string',
'email_design_set_id' => 'string',
'id' => 'string',
'is_system' => 'bool',
'is_used_by_default' => 'bool',
'name' => 'string',
'subject' => 'string',
'system_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'body' => null,
'date_created' => 'date-time',
'date_modified' => 'date-time',
'default_recipients' => null,
'default_timing' => null,
'email_design_set_id' => 'uuid',
'id' => 'uuid',
'is_system' => null,
'is_used_by_default' => null,
'name' => null,
'subject' => null,
'system_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
'date_created' => 'dateCreated',
'date_modified' => 'dateModified',
'default_recipients' => 'defaultRecipients',
'default_timing' => 'defaultTiming',
'email_design_set_id' => 'emailDesignSetId',
'id' => 'id',
'is_system' => 'isSystem',
'is_used_by_default' => 'isUsedByDefault',
'name' => 'name',
'subject' => 'subject',
'system_id' => 'systemId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
'date_created' => 'setDateCreated',
'date_modified' => 'setDateModified',
'default_recipients' => 'setDefaultRecipients',
'default_timing' => 'setDefaultTiming',
'email_design_set_id' => 'setEmailDesignSetId',
'id' => 'setId',
'is_system' => 'setIsSystem',
'is_used_by_default' => 'setIsUsedByDefault',
'name' => 'setName',
'subject' => 'setSubject',
'system_id' => 'setSystemId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
'date_created' => 'getDateCreated',
'date_modified' => 'getDateModified',
'default_recipients' => 'getDefaultRecipients',
'default_timing' => 'getDefaultTiming',
'email_design_set_id' => 'getEmailDesignSetId',
'id' => 'getId',
'is_system' => 'getIsSystem',
'is_used_by_default' => 'getIsUsedByDefault',
'name' => 'getName',
'subject' => 'getSubject',
'system_id' => 'getSystemId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DEFAULT_RECIPIENTS_NONE = 'None';
const DEFAULT_RECIPIENTS_ORIGINATOR = 'Originator';
const DEFAULT_RECIPIENTS_SIGNERS_SIGNING_STEP = 'Signers_SigningStep';
const DEFAULT_RECIPIENTS_SIGNERS_ALL = 'Signers_All';
const DEFAULT_TIMING_ON_DOCUMENT_STEP_START = 'OnDocumentStepStart';
const DEFAULT_TIMING_ON_DOCUMENT_STEP_COMPLETE = 'OnDocumentStepComplete';
const DEFAULT_TIMING_ON_DOCUMENT_START = 'OnDocumentStart';
const DEFAULT_TIMING_ON_DOCUMENT_COMPLETE = 'OnDocumentComplete';
const DEFAULT_TIMING_ON_DOCUMENT_PRE_EXPIRE = 'OnDocumentPreExpire';
const DEFAULT_TIMING_ON_DOCUMENT_EXPIRE = 'OnDocumentExpire';
const DEFAULT_TIMING_ON_DOCUMENT_LANDING_VISIT = 'OnDocumentLandingVisit';
const DEFAULT_TIMING_ON_DOCUMENT_CANCEL = 'OnDocumentCancel';
const DEFAULT_TIMING_ON_DOCUMENT_DECLINE = 'OnDocumentDecline';
const DEFAULT_TIMING_ON_ENVELOPE_CLOSURE = 'OnEnvelopeClosure';
const DEFAULT_TIMING_ON_ENVELOPE_PRE_EXPIRE = 'OnEnvelopePreExpire';
const DEFAULT_TIMING_ON_ENVELOPE_EXPIRE = 'OnEnvelopeExpire';
const DEFAULT_TIMING_ON_ENVELOPE_COMPLETE = 'OnEnvelopeComplete';
const DEFAULT_TIMING_ON_ENVELOPE_CANCEL = 'OnEnvelopeCancel';
const DEFAULT_TIMING_ON_ENVELOPE_DECLINE = 'OnEnvelopeDecline';
const DEFAULT_TIMING_ON_DOCUMENT_SIGNER_FEEDBACK = 'OnDocumentSignerFeedback';
const DEFAULT_TIMING_ON_ENVELOPE_SIGNER_FEEDBACK = 'OnEnvelopeSignerFeedback';
const DEFAULT_TIMING_ON_DOCUMENT_SIGNER_AUTH_FAILURE = 'OnDocumentSignerAuthFailure';
const DEFAULT_TIMING_ON_ENVELOPE_SIGNER_AUTH_FAILURE = 'OnEnvelopeSignerAuthFailure';
const DEFAULT_TIMING_ON_DOCUMENT_SIGNER_KBA_START = 'OnDocumentSignerKbaStart';
const DEFAULT_TIMING_ON_ENVELOPE_SIGNER_KBA_START = 'OnEnvelopeSignerKbaStart';
const DEFAULT_TIMING_ON_DOCUMENT_SIGNER_KBA_COMPLETE = 'OnDocumentSignerKbaComplete';
const DEFAULT_TIMING_ON_ENVELOPE_SIGNER_KBA_COMPLETE = 'OnEnvelopeSignerKbaComplete';
const DEFAULT_TIMING_ON_ENVELOPE_STEP_START = 'OnEnvelopeStepStart';
const DEFAULT_TIMING_ON_ENVELOPE_STEP_COMPLETE = 'OnEnvelopeStepComplete';
const DEFAULT_TIMING_ON_PAYMENT_APPROVED = 'OnPaymentApproved';
const DEFAULT_TIMING_ON_PAYMENT_DECLINED = 'OnPaymentDeclined';
const DEFAULT_TIMING_ON_PAYMENT_REFUNDED = 'OnPaymentRefunded';
const DEFAULT_TIMING_ON_ENVELOPE_LANDING_VISIT = 'OnEnvelopeLandingVisit';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultRecipientsAllowableValues()
    {
        return [
            self::DEFAULT_RECIPIENTS_NONE,
self::DEFAULT_RECIPIENTS_ORIGINATOR,
self::DEFAULT_RECIPIENTS_SIGNERS_SIGNING_STEP,
self::DEFAULT_RECIPIENTS_SIGNERS_ALL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultTimingAllowableValues()
    {
        return [
            self::DEFAULT_TIMING_ON_DOCUMENT_STEP_START,
self::DEFAULT_TIMING_ON_DOCUMENT_STEP_COMPLETE,
self::DEFAULT_TIMING_ON_DOCUMENT_START,
self::DEFAULT_TIMING_ON_DOCUMENT_COMPLETE,
self::DEFAULT_TIMING_ON_DOCUMENT_PRE_EXPIRE,
self::DEFAULT_TIMING_ON_DOCUMENT_EXPIRE,
self::DEFAULT_TIMING_ON_DOCUMENT_LANDING_VISIT,
self::DEFAULT_TIMING_ON_DOCUMENT_CANCEL,
self::DEFAULT_TIMING_ON_DOCUMENT_DECLINE,
self::DEFAULT_TIMING_ON_ENVELOPE_CLOSURE,
self::DEFAULT_TIMING_ON_ENVELOPE_PRE_EXPIRE,
self::DEFAULT_TIMING_ON_ENVELOPE_EXPIRE,
self::DEFAULT_TIMING_ON_ENVELOPE_COMPLETE,
self::DEFAULT_TIMING_ON_ENVELOPE_CANCEL,
self::DEFAULT_TIMING_ON_ENVELOPE_DECLINE,
self::DEFAULT_TIMING_ON_DOCUMENT_SIGNER_FEEDBACK,
self::DEFAULT_TIMING_ON_ENVELOPE_SIGNER_FEEDBACK,
self::DEFAULT_TIMING_ON_DOCUMENT_SIGNER_AUTH_FAILURE,
self::DEFAULT_TIMING_ON_ENVELOPE_SIGNER_AUTH_FAILURE,
self::DEFAULT_TIMING_ON_DOCUMENT_SIGNER_KBA_START,
self::DEFAULT_TIMING_ON_ENVELOPE_SIGNER_KBA_START,
self::DEFAULT_TIMING_ON_DOCUMENT_SIGNER_KBA_COMPLETE,
self::DEFAULT_TIMING_ON_ENVELOPE_SIGNER_KBA_COMPLETE,
self::DEFAULT_TIMING_ON_ENVELOPE_STEP_START,
self::DEFAULT_TIMING_ON_ENVELOPE_STEP_COMPLETE,
self::DEFAULT_TIMING_ON_PAYMENT_APPROVED,
self::DEFAULT_TIMING_ON_PAYMENT_DECLINED,
self::DEFAULT_TIMING_ON_PAYMENT_REFUNDED,
self::DEFAULT_TIMING_ON_ENVELOPE_LANDING_VISIT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_modified'] = isset($data['date_modified']) ? $data['date_modified'] : null;
        $this->container['default_recipients'] = isset($data['default_recipients']) ? $data['default_recipients'] : null;
        $this->container['default_timing'] = isset($data['default_timing']) ? $data['default_timing'] : null;
        $this->container['email_design_set_id'] = isset($data['email_design_set_id']) ? $data['email_design_set_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_system'] = isset($data['is_system']) ? $data['is_system'] : null;
        $this->container['is_used_by_default'] = isset($data['is_used_by_default']) ? $data['is_used_by_default'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['system_id'] = isset($data['system_id']) ? $data['system_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultRecipientsAllowableValues();
        if (!is_null($this->container['default_recipients']) && !in_array($this->container['default_recipients'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'default_recipients', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDefaultTimingAllowableValues();
        if (!is_null($this->container['default_timing']) && !in_array($this->container['default_timing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'default_timing', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return \DateTime
     */
    public function getDateModified()
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param \DateTime $date_modified date_modified
     *
     * @return $this
     */
    public function setDateModified($date_modified)
    {
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets default_recipients
     *
     * @return string
     */
    public function getDefaultRecipients()
    {
        return $this->container['default_recipients'];
    }

    /**
     * Sets default_recipients
     *
     * @param string $default_recipients default_recipients
     *
     * @return $this
     */
    public function setDefaultRecipients($default_recipients)
    {
        $allowedValues = $this->getDefaultRecipientsAllowableValues();
        if (!is_null($default_recipients) && !in_array($default_recipients, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'default_recipients', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_recipients'] = $default_recipients;

        return $this;
    }

    /**
     * Gets default_timing
     *
     * @return string
     */
    public function getDefaultTiming()
    {
        return $this->container['default_timing'];
    }

    /**
     * Sets default_timing
     *
     * @param string $default_timing default_timing
     *
     * @return $this
     */
    public function setDefaultTiming($default_timing)
    {
        $allowedValues = $this->getDefaultTimingAllowableValues();
        if (!is_null($default_timing) && !in_array($default_timing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'default_timing', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_timing'] = $default_timing;

        return $this;
    }

    /**
     * Gets email_design_set_id
     *
     * @return string
     */
    public function getEmailDesignSetId()
    {
        return $this->container['email_design_set_id'];
    }

    /**
     * Sets email_design_set_id
     *
     * @param string $email_design_set_id email_design_set_id
     *
     * @return $this
     */
    public function setEmailDesignSetId($email_design_set_id)
    {
        $this->container['email_design_set_id'] = $email_design_set_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_system
     *
     * @return bool
     */
    public function getIsSystem()
    {
        return $this->container['is_system'];
    }

    /**
     * Sets is_system
     *
     * @param bool $is_system is_system
     *
     * @return $this
     */
    public function setIsSystem($is_system)
    {
        $this->container['is_system'] = $is_system;

        return $this;
    }

    /**
     * Gets is_used_by_default
     *
     * @return bool
     */
    public function getIsUsedByDefault()
    {
        return $this->container['is_used_by_default'];
    }

    /**
     * Sets is_used_by_default
     *
     * @param bool $is_used_by_default is_used_by_default
     *
     * @return $this
     */
    public function setIsUsedByDefault($is_used_by_default)
    {
        $this->container['is_used_by_default'] = $is_used_by_default;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets system_id
     *
     * @return string
     */
    public function getSystemId()
    {
        return $this->container['system_id'];
    }

    /**
     * Sets system_id
     *
     * @param string $system_id system_id
     *
     * @return $this
     */
    public function setSystemId($system_id)
    {
        $this->container['system_id'] = $system_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
