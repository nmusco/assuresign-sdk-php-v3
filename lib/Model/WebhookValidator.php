<?php
/**
 * WebhookValidator
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * AssureSign DocumentNOW electronic signature APIs (envelopes and documents) For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * WebhookValidator Class Doc Comment
 *
 * @category Class
 * @description An explanation about the purpose of this instance.
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebhookValidator implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'webhookValidator';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'validator_type' => 'string',
        'validator_condition' => 'string',
        'value' => 'string',
        'x_path_query' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'validator_type' => null,
        'validator_condition' => null,
        'value' => null,
        'x_path_query' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'validator_type' => 'validatorType',
        'validator_condition' => 'validatorCondition',
        'value' => 'value',
        'x_path_query' => 'xPathQuery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'validator_type' => 'setValidatorType',
        'validator_condition' => 'setValidatorCondition',
        'value' => 'setValue',
        'x_path_query' => 'setXPathQuery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'validator_type' => 'getValidatorType',
        'validator_condition' => 'getValidatorCondition',
        'value' => 'getValue',
        'x_path_query' => 'getXPathQuery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const VALIDATOR_TYPE_STATUS_CODE = 'statusCode';
    const VALIDATOR_TYPE_BODY = 'body';
    const VALIDATOR_TYPE_X_PATH = 'xPath';
    const VALIDATOR_CONDITION_EQUALS = 'equals';
    const VALIDATOR_CONDITION_CONTAINS = 'contains';
    const VALIDATOR_CONDITION_DOES_NOT_CONTAIN = 'doesNotContain';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidatorTypeAllowableValues()
    {
        return [
            self::VALIDATOR_TYPE_STATUS_CODE,
            self::VALIDATOR_TYPE_BODY,
            self::VALIDATOR_TYPE_X_PATH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidatorConditionAllowableValues()
    {
        return [
            self::VALIDATOR_CONDITION_EQUALS,
            self::VALIDATOR_CONDITION_CONTAINS,
            self::VALIDATOR_CONDITION_DOES_NOT_CONTAIN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['validator_type'] = isset($data['validator_type']) ? $data['validator_type'] : null;
        $this->container['validator_condition'] = isset($data['validator_condition']) ? $data['validator_condition'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['x_path_query'] = isset($data['x_path_query']) ? $data['x_path_query'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['validator_type'] === null) {
            $invalidProperties[] = "'validator_type' can't be null";
        }
        $allowedValues = $this->getValidatorTypeAllowableValues();
        if (!is_null($this->container['validator_type']) && !in_array($this->container['validator_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'validator_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['validator_condition'] === null) {
            $invalidProperties[] = "'validator_condition' can't be null";
        }
        $allowedValues = $this->getValidatorConditionAllowableValues();
        if (!is_null($this->container['validator_condition']) && !in_array($this->container['validator_condition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'validator_condition', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets validator_type
     *
     * @return string
     */
    public function getValidatorType()
    {
        return $this->container['validator_type'];
    }

    /**
     * Sets validator_type
     *
     * @param string $validator_type What type of value is being compared: Http Status Code, Reponse Body, or a JSON/XML xPath.
     *
     * @return $this
     */
    public function setValidatorType($validator_type)
    {
        $allowedValues = $this->getValidatorTypeAllowableValues();
        if (!in_array($validator_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'validator_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['validator_type'] = $validator_type;

        return $this;
    }

    /**
     * Gets validator_condition
     *
     * @return string
     */
    public function getValidatorCondition()
    {
        return $this->container['validator_condition'];
    }

    /**
     * Sets validator_condition
     *
     * @param string $validator_condition This is a logical operator of Equals, Contains or Does not Contain
     *
     * @return $this
     */
    public function setValidatorCondition($validator_condition)
    {
        $allowedValues = $this->getValidatorConditionAllowableValues();
        if (!in_array($validator_condition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'validator_condition', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['validator_condition'] = $validator_condition;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value The value that is compared in the conditional
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets x_path_query
     *
     * @return string|null
     */
    public function getXPathQuery()
    {
        return $this->container['x_path_query'];
    }

    /**
     * Sets x_path_query
     *
     * @param string|null $x_path_query The xPath to select the value from a valid XML or JSON response for comparison
     *
     * @return $this
     */
    public function setXPathQuery($x_path_query)
    {
        $this->container['x_path_query'] = $x_path_query;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


