<?php
/**
 * PreparedEnvelopeParsedContent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * AssureSign DocumentNOW electronic signature APIs (envelopes and documents) For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * PreparedEnvelopeParsedContent Class Doc Comment
 *
 * @category Class
 * @description Provides the data required for submitting an envelope.
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PreparedEnvelopeParsedContent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'preparedEnvelopeParsed_content';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addendums' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentAddendums[]',
        'documents' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentDocuments[]',
        'email_notifications' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentEmailNotifications[]',
        'envelope' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentEnvelope',
        'notification_recipients' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentNotificationRecipients[]',
        'signers' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentSigners[]',
        'sms_notifications' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentSmsNotifications[]',
        'steps' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentSteps[]',
        'conditional_logic_items' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentConditionalLogicItems[]',
        'web_hook_notifications' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentWebHookNotifications[]',
        'document_transmissions' => '\Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentDocumentTransmissions[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'addendums' => null,
        'documents' => null,
        'email_notifications' => null,
        'envelope' => null,
        'notification_recipients' => null,
        'signers' => null,
        'sms_notifications' => null,
        'steps' => null,
        'conditional_logic_items' => null,
        'web_hook_notifications' => null,
        'document_transmissions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addendums' => 'addendums',
        'documents' => 'documents',
        'email_notifications' => 'emailNotifications',
        'envelope' => 'envelope',
        'notification_recipients' => 'notificationRecipients',
        'signers' => 'signers',
        'sms_notifications' => 'smsNotifications',
        'steps' => 'steps',
        'conditional_logic_items' => 'conditionalLogicItems',
        'web_hook_notifications' => 'webHookNotifications',
        'document_transmissions' => 'documentTransmissions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addendums' => 'setAddendums',
        'documents' => 'setDocuments',
        'email_notifications' => 'setEmailNotifications',
        'envelope' => 'setEnvelope',
        'notification_recipients' => 'setNotificationRecipients',
        'signers' => 'setSigners',
        'sms_notifications' => 'setSmsNotifications',
        'steps' => 'setSteps',
        'conditional_logic_items' => 'setConditionalLogicItems',
        'web_hook_notifications' => 'setWebHookNotifications',
        'document_transmissions' => 'setDocumentTransmissions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addendums' => 'getAddendums',
        'documents' => 'getDocuments',
        'email_notifications' => 'getEmailNotifications',
        'envelope' => 'getEnvelope',
        'notification_recipients' => 'getNotificationRecipients',
        'signers' => 'getSigners',
        'sms_notifications' => 'getSmsNotifications',
        'steps' => 'getSteps',
        'conditional_logic_items' => 'getConditionalLogicItems',
        'web_hook_notifications' => 'getWebHookNotifications',
        'document_transmissions' => 'getDocumentTransmissions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addendums'] = isset($data['addendums']) ? $data['addendums'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['email_notifications'] = isset($data['email_notifications']) ? $data['email_notifications'] : null;
        $this->container['envelope'] = isset($data['envelope']) ? $data['envelope'] : null;
        $this->container['notification_recipients'] = isset($data['notification_recipients']) ? $data['notification_recipients'] : null;
        $this->container['signers'] = isset($data['signers']) ? $data['signers'] : null;
        $this->container['sms_notifications'] = isset($data['sms_notifications']) ? $data['sms_notifications'] : null;
        $this->container['steps'] = isset($data['steps']) ? $data['steps'] : null;
        $this->container['conditional_logic_items'] = isset($data['conditional_logic_items']) ? $data['conditional_logic_items'] : null;
        $this->container['web_hook_notifications'] = isset($data['web_hook_notifications']) ? $data['web_hook_notifications'] : null;
        $this->container['document_transmissions'] = isset($data['document_transmissions']) ? $data['document_transmissions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addendums
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentAddendums[]|null
     */
    public function getAddendums()
    {
        return $this->container['addendums'];
    }

    /**
     * Sets addendums
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentAddendums[]|null $addendums Provides a list of non-signable addendums associated with the envelope.
     *
     * @return $this
     */
    public function setAddendums($addendums)
    {
        $this->container['addendums'] = $addendums;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentDocuments[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentDocuments[]|null $documents Provides a list of the documents included in the envelope.
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets email_notifications
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentEmailNotifications[]|null
     */
    public function getEmailNotifications()
    {
        return $this->container['email_notifications'];
    }

    /**
     * Sets email_notifications
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentEmailNotifications[]|null $email_notifications Provides a list of email notifications that will be sent throughout the envelope life-cycle.
     *
     * @return $this
     */
    public function setEmailNotifications($email_notifications)
    {
        $this->container['email_notifications'] = $email_notifications;

        return $this;
    }

    /**
     * Gets envelope
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentEnvelope|null
     */
    public function getEnvelope()
    {
        return $this->container['envelope'];
    }

    /**
     * Sets envelope
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentEnvelope|null $envelope envelope
     *
     * @return $this
     */
    public function setEnvelope($envelope)
    {
        $this->container['envelope'] = $envelope;

        return $this;
    }

    /**
     * Gets notification_recipients
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentNotificationRecipients[]|null
     */
    public function getNotificationRecipients()
    {
        return $this->container['notification_recipients'];
    }

    /**
     * Sets notification_recipients
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentNotificationRecipients[]|null $notification_recipients Provides a list of additional recipients for notifications.
     *
     * @return $this
     */
    public function setNotificationRecipients($notification_recipients)
    {
        $this->container['notification_recipients'] = $notification_recipients;

        return $this;
    }

    /**
     * Gets signers
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentSigners[]|null
     */
    public function getSigners()
    {
        return $this->container['signers'];
    }

    /**
     * Sets signers
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentSigners[]|null $signers Provides a list of signers defined for the envelope.
     *
     * @return $this
     */
    public function setSigners($signers)
    {
        $this->container['signers'] = $signers;

        return $this;
    }

    /**
     * Gets sms_notifications
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentSmsNotifications[]|null
     */
    public function getSmsNotifications()
    {
        return $this->container['sms_notifications'];
    }

    /**
     * Sets sms_notifications
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentSmsNotifications[]|null $sms_notifications Provides a list of SMS notifications that will be sent throughout the envelope life-cycle.
     *
     * @return $this
     */
    public function setSmsNotifications($sms_notifications)
    {
        $this->container['sms_notifications'] = $sms_notifications;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentSteps[]|null
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentSteps[]|null $steps Provides a list of workflow steps to be used when using a Custom envelope workflow type.
     *
     * @return $this
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets conditional_logic_items
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentConditionalLogicItems[]|null
     */
    public function getConditionalLogicItems()
    {
        return $this->container['conditional_logic_items'];
    }

    /**
     * Sets conditional_logic_items
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentConditionalLogicItems[]|null $conditional_logic_items Conditional logic allows you to create rules that test conditions during signing to change elements of the signing process.
     *
     * @return $this
     */
    public function setConditionalLogicItems($conditional_logic_items)
    {
        $this->container['conditional_logic_items'] = $conditional_logic_items;

        return $this;
    }

    /**
     * Gets web_hook_notifications
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentWebHookNotifications[]|null
     */
    public function getWebHookNotifications()
    {
        return $this->container['web_hook_notifications'];
    }

    /**
     * Sets web_hook_notifications
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentWebHookNotifications[]|null $web_hook_notifications Provides a list of webhooks in a given stage
     *
     * @return $this
     */
    public function setWebHookNotifications($web_hook_notifications)
    {
        $this->container['web_hook_notifications'] = $web_hook_notifications;

        return $this;
    }

    /**
     * Gets document_transmissions
     *
     * @return \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentDocumentTransmissions[]|null
     */
    public function getDocumentTransmissions()
    {
        return $this->container['document_transmissions'];
    }

    /**
     * Sets document_transmissions
     *
     * @param \Nmusco\AssureSign\v3\Model\PreparedEnvelopeParsedContentDocumentTransmissions[]|null $document_transmissions Provides a list of document transmissions to be executed at Envelope Complete
     *
     * @return $this
     */
    public function setDocumentTransmissions($document_transmissions)
    {
        $this->container['document_transmissions'] = $document_transmissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


