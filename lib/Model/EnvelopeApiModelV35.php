<?php
/**
 * EnvelopeApiModelV35
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)</h3>
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * EnvelopeApiModelV35 Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvelopeApiModelV35 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'envelopeApiModelV3_5';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountID' => 'string',
        'accountName' => 'string',
        'cancelledDate' => '\DateTime',
        'completionDate' => '\DateTime',
        'declineBehavior' => 'string',
        'declinedDate' => '\DateTime',
        'expiredDate' => '\DateTime',
        'staledDate' => '\DateTime',
        'staleDate' => '\DateTime',
        'hasPassword' => 'bool',
        'evnelopeID' => 'string',
        'name' => 'string',
        'redirectUrl' => 'string',
        'signerAuthFailureDate' => '\DateTime',
        'userAccountID' => 'string',
        'viewBehavior' => 'string',
        'closedDate' => '\DateTime',
        'envelopeStatusType' => 'string',
        'isFinalized' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountID' => 'uuid',
        'accountName' => null,
        'cancelledDate' => 'date-time',
        'completionDate' => 'date-time',
        'declineBehavior' => null,
        'declinedDate' => 'date-time',
        'expiredDate' => 'date-time',
        'staledDate' => 'date-time',
        'staleDate' => 'date-time',
        'hasPassword' => null,
        'evnelopeID' => 'uuid',
        'name' => null,
        'redirectUrl' => null,
        'signerAuthFailureDate' => 'date-time',
        'userAccountID' => 'uuid',
        'viewBehavior' => null,
        'closedDate' => 'date-time',
        'envelopeStatusType' => null,
        'isFinalized' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountID' => 'accountID',
        'accountName' => 'accountName',
        'cancelledDate' => 'cancelledDate',
        'completionDate' => 'completionDate',
        'declineBehavior' => 'declineBehavior',
        'declinedDate' => 'declinedDate',
        'expiredDate' => 'expiredDate',
        'staledDate' => 'staledDate',
        'staleDate' => 'staleDate',
        'hasPassword' => 'hasPassword',
        'evnelopeID' => 'evnelopeID',
        'name' => 'name',
        'redirectUrl' => 'redirectUrl',
        'signerAuthFailureDate' => 'signerAuthFailureDate',
        'userAccountID' => 'userAccountID',
        'viewBehavior' => 'viewBehavior',
        'closedDate' => 'closedDate',
        'envelopeStatusType' => 'envelopeStatusType',
        'isFinalized' => 'isFinalized'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountID' => 'setAccountID',
        'accountName' => 'setAccountName',
        'cancelledDate' => 'setCancelledDate',
        'completionDate' => 'setCompletionDate',
        'declineBehavior' => 'setDeclineBehavior',
        'declinedDate' => 'setDeclinedDate',
        'expiredDate' => 'setExpiredDate',
        'staledDate' => 'setStaledDate',
        'staleDate' => 'setStaleDate',
        'hasPassword' => 'setHasPassword',
        'evnelopeID' => 'setEvnelopeID',
        'name' => 'setName',
        'redirectUrl' => 'setRedirectUrl',
        'signerAuthFailureDate' => 'setSignerAuthFailureDate',
        'userAccountID' => 'setUserAccountID',
        'viewBehavior' => 'setViewBehavior',
        'closedDate' => 'setClosedDate',
        'envelopeStatusType' => 'setEnvelopeStatusType',
        'isFinalized' => 'setIsFinalized'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountID' => 'getAccountID',
        'accountName' => 'getAccountName',
        'cancelledDate' => 'getCancelledDate',
        'completionDate' => 'getCompletionDate',
        'declineBehavior' => 'getDeclineBehavior',
        'declinedDate' => 'getDeclinedDate',
        'expiredDate' => 'getExpiredDate',
        'staledDate' => 'getStaledDate',
        'staleDate' => 'getStaleDate',
        'hasPassword' => 'getHasPassword',
        'evnelopeID' => 'getEvnelopeID',
        'name' => 'getName',
        'redirectUrl' => 'getRedirectUrl',
        'signerAuthFailureDate' => 'getSignerAuthFailureDate',
        'userAccountID' => 'getUserAccountID',
        'viewBehavior' => 'getViewBehavior',
        'closedDate' => 'getClosedDate',
        'envelopeStatusType' => 'getEnvelopeStatusType',
        'isFinalized' => 'getIsFinalized'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DECLINE_BEHAVIOR_DECLINE_ALL = 'DeclineAll';
    const DECLINE_BEHAVIOR_DECLINE_SINGLE = 'DeclineSingle';
    const VIEW_BEHAVIOR_VIEW_SIGNATORY_ONLY = 'ViewSignatoryOnly';
    const VIEW_BEHAVIOR_VIEW_ALL = 'ViewAll';
    const ENVELOPE_STATUS_TYPE_CREATED = 'CREATED';
    const ENVELOPE_STATUS_TYPE_IN_PROGRESS = 'IN_PROGRESS';
    const ENVELOPE_STATUS_TYPE_COMPLETED = 'COMPLETED';
    const ENVELOPE_STATUS_TYPE_EXPIRED = 'EXPIRED';
    const ENVELOPE_STATUS_TYPE_DECLINED = 'DECLINED';
    const ENVELOPE_STATUS_TYPE_CANCELLED = 'CANCELLED';
    const ENVELOPE_STATUS_TYPE_STALED = 'STALED';
    const ENVELOPE_STATUS_TYPE_SIGNER_AUTHENTICATION_FAILED = 'SIGNER_AUTHENTICATION_FAILED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeclineBehaviorAllowableValues()
    {
        return [
            self::DECLINE_BEHAVIOR_DECLINE_ALL,
            self::DECLINE_BEHAVIOR_DECLINE_SINGLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViewBehaviorAllowableValues()
    {
        return [
            self::VIEW_BEHAVIOR_VIEW_SIGNATORY_ONLY,
            self::VIEW_BEHAVIOR_VIEW_ALL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnvelopeStatusTypeAllowableValues()
    {
        return [
            self::ENVELOPE_STATUS_TYPE_CREATED,
            self::ENVELOPE_STATUS_TYPE_IN_PROGRESS,
            self::ENVELOPE_STATUS_TYPE_COMPLETED,
            self::ENVELOPE_STATUS_TYPE_EXPIRED,
            self::ENVELOPE_STATUS_TYPE_DECLINED,
            self::ENVELOPE_STATUS_TYPE_CANCELLED,
            self::ENVELOPE_STATUS_TYPE_STALED,
            self::ENVELOPE_STATUS_TYPE_SIGNER_AUTHENTICATION_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountID'] = isset($data['accountID']) ? $data['accountID'] : null;
        $this->container['accountName'] = isset($data['accountName']) ? $data['accountName'] : null;
        $this->container['cancelledDate'] = isset($data['cancelledDate']) ? $data['cancelledDate'] : null;
        $this->container['completionDate'] = isset($data['completionDate']) ? $data['completionDate'] : null;
        $this->container['declineBehavior'] = isset($data['declineBehavior']) ? $data['declineBehavior'] : null;
        $this->container['declinedDate'] = isset($data['declinedDate']) ? $data['declinedDate'] : null;
        $this->container['expiredDate'] = isset($data['expiredDate']) ? $data['expiredDate'] : null;
        $this->container['staledDate'] = isset($data['staledDate']) ? $data['staledDate'] : null;
        $this->container['staleDate'] = isset($data['staleDate']) ? $data['staleDate'] : null;
        $this->container['hasPassword'] = isset($data['hasPassword']) ? $data['hasPassword'] : null;
        $this->container['evnelopeID'] = isset($data['evnelopeID']) ? $data['evnelopeID'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['redirectUrl'] = isset($data['redirectUrl']) ? $data['redirectUrl'] : null;
        $this->container['signerAuthFailureDate'] = isset($data['signerAuthFailureDate']) ? $data['signerAuthFailureDate'] : null;
        $this->container['userAccountID'] = isset($data['userAccountID']) ? $data['userAccountID'] : null;
        $this->container['viewBehavior'] = isset($data['viewBehavior']) ? $data['viewBehavior'] : null;
        $this->container['closedDate'] = isset($data['closedDate']) ? $data['closedDate'] : null;
        $this->container['envelopeStatusType'] = isset($data['envelopeStatusType']) ? $data['envelopeStatusType'] : null;
        $this->container['isFinalized'] = isset($data['isFinalized']) ? $data['isFinalized'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeclineBehaviorAllowableValues();
        if (!is_null($this->container['declineBehavior']) && !in_array($this->container['declineBehavior'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'declineBehavior', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getViewBehaviorAllowableValues();
        if (!is_null($this->container['viewBehavior']) && !in_array($this->container['viewBehavior'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'viewBehavior', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEnvelopeStatusTypeAllowableValues();
        if (!is_null($this->container['envelopeStatusType']) && !in_array($this->container['envelopeStatusType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'envelopeStatusType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountID
     *
     * @return string|null
     */
    public function getAccountID()
    {
        return $this->container['accountID'];
    }

    /**
     * Sets accountID
     *
     * @param string|null $accountID accountID
     *
     * @return $this
     */
    public function setAccountID($accountID)
    {
        $this->container['accountID'] = $accountID;

        return $this;
    }

    /**
     * Gets accountName
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName
     *
     * @param string|null $accountName accountName
     *
     * @return $this
     */
    public function setAccountName($accountName)
    {
        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets cancelledDate
     *
     * @return \DateTime|null
     */
    public function getCancelledDate()
    {
        return $this->container['cancelledDate'];
    }

    /**
     * Sets cancelledDate
     *
     * @param \DateTime|null $cancelledDate cancelledDate
     *
     * @return $this
     */
    public function setCancelledDate($cancelledDate)
    {
        $this->container['cancelledDate'] = $cancelledDate;

        return $this;
    }

    /**
     * Gets completionDate
     *
     * @return \DateTime|null
     */
    public function getCompletionDate()
    {
        return $this->container['completionDate'];
    }

    /**
     * Sets completionDate
     *
     * @param \DateTime|null $completionDate completionDate
     *
     * @return $this
     */
    public function setCompletionDate($completionDate)
    {
        $this->container['completionDate'] = $completionDate;

        return $this;
    }

    /**
     * Gets declineBehavior
     *
     * @return string|null
     */
    public function getDeclineBehavior()
    {
        return $this->container['declineBehavior'];
    }

    /**
     * Sets declineBehavior
     *
     * @param string|null $declineBehavior declineBehavior
     *
     * @return $this
     */
    public function setDeclineBehavior($declineBehavior)
    {
        $allowedValues = $this->getDeclineBehaviorAllowableValues();
        if (!is_null($declineBehavior) && !in_array($declineBehavior, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'declineBehavior', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['declineBehavior'] = $declineBehavior;

        return $this;
    }

    /**
     * Gets declinedDate
     *
     * @return \DateTime|null
     */
    public function getDeclinedDate()
    {
        return $this->container['declinedDate'];
    }

    /**
     * Sets declinedDate
     *
     * @param \DateTime|null $declinedDate declinedDate
     *
     * @return $this
     */
    public function setDeclinedDate($declinedDate)
    {
        $this->container['declinedDate'] = $declinedDate;

        return $this;
    }

    /**
     * Gets expiredDate
     *
     * @return \DateTime|null
     */
    public function getExpiredDate()
    {
        return $this->container['expiredDate'];
    }

    /**
     * Sets expiredDate
     *
     * @param \DateTime|null $expiredDate expiredDate
     *
     * @return $this
     */
    public function setExpiredDate($expiredDate)
    {
        $this->container['expiredDate'] = $expiredDate;

        return $this;
    }

    /**
     * Gets staledDate
     *
     * @return \DateTime|null
     */
    public function getStaledDate()
    {
        return $this->container['staledDate'];
    }

    /**
     * Sets staledDate
     *
     * @param \DateTime|null $staledDate staledDate
     *
     * @return $this
     */
    public function setStaledDate($staledDate)
    {
        $this->container['staledDate'] = $staledDate;

        return $this;
    }

    /**
     * Gets staleDate
     *
     * @return \DateTime|null
     */
    public function getStaleDate()
    {
        return $this->container['staleDate'];
    }

    /**
     * Sets staleDate
     *
     * @param \DateTime|null $staleDate staleDate
     *
     * @return $this
     */
    public function setStaleDate($staleDate)
    {
        $this->container['staleDate'] = $staleDate;

        return $this;
    }

    /**
     * Gets hasPassword
     *
     * @return bool|null
     */
    public function getHasPassword()
    {
        return $this->container['hasPassword'];
    }

    /**
     * Sets hasPassword
     *
     * @param bool|null $hasPassword hasPassword
     *
     * @return $this
     */
    public function setHasPassword($hasPassword)
    {
        $this->container['hasPassword'] = $hasPassword;

        return $this;
    }

    /**
     * Gets evnelopeID
     *
     * @return string|null
     */
    public function getEvnelopeID()
    {
        return $this->container['evnelopeID'];
    }

    /**
     * Sets evnelopeID
     *
     * @param string|null $evnelopeID evnelopeID
     *
     * @return $this
     */
    public function setEvnelopeID($evnelopeID)
    {
        $this->container['evnelopeID'] = $evnelopeID;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets redirectUrl
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirectUrl'];
    }

    /**
     * Sets redirectUrl
     *
     * @param string|null $redirectUrl redirectUrl
     *
     * @return $this
     */
    public function setRedirectUrl($redirectUrl)
    {
        $this->container['redirectUrl'] = $redirectUrl;

        return $this;
    }

    /**
     * Gets signerAuthFailureDate
     *
     * @return \DateTime|null
     */
    public function getSignerAuthFailureDate()
    {
        return $this->container['signerAuthFailureDate'];
    }

    /**
     * Sets signerAuthFailureDate
     *
     * @param \DateTime|null $signerAuthFailureDate signerAuthFailureDate
     *
     * @return $this
     */
    public function setSignerAuthFailureDate($signerAuthFailureDate)
    {
        $this->container['signerAuthFailureDate'] = $signerAuthFailureDate;

        return $this;
    }

    /**
     * Gets userAccountID
     *
     * @return string|null
     */
    public function getUserAccountID()
    {
        return $this->container['userAccountID'];
    }

    /**
     * Sets userAccountID
     *
     * @param string|null $userAccountID userAccountID
     *
     * @return $this
     */
    public function setUserAccountID($userAccountID)
    {
        $this->container['userAccountID'] = $userAccountID;

        return $this;
    }

    /**
     * Gets viewBehavior
     *
     * @return string|null
     */
    public function getViewBehavior()
    {
        return $this->container['viewBehavior'];
    }

    /**
     * Sets viewBehavior
     *
     * @param string|null $viewBehavior viewBehavior
     *
     * @return $this
     */
    public function setViewBehavior($viewBehavior)
    {
        $allowedValues = $this->getViewBehaviorAllowableValues();
        if (!is_null($viewBehavior) && !in_array($viewBehavior, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'viewBehavior', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['viewBehavior'] = $viewBehavior;

        return $this;
    }

    /**
     * Gets closedDate
     *
     * @return \DateTime|null
     */
    public function getClosedDate()
    {
        return $this->container['closedDate'];
    }

    /**
     * Sets closedDate
     *
     * @param \DateTime|null $closedDate closedDate
     *
     * @return $this
     */
    public function setClosedDate($closedDate)
    {
        $this->container['closedDate'] = $closedDate;

        return $this;
    }

    /**
     * Gets envelopeStatusType
     *
     * @return string|null
     */
    public function getEnvelopeStatusType()
    {
        return $this->container['envelopeStatusType'];
    }

    /**
     * Sets envelopeStatusType
     *
     * @param string|null $envelopeStatusType envelopeStatusType
     *
     * @return $this
     */
    public function setEnvelopeStatusType($envelopeStatusType)
    {
        $allowedValues = $this->getEnvelopeStatusTypeAllowableValues();
        if (!is_null($envelopeStatusType) && !in_array($envelopeStatusType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'envelopeStatusType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['envelopeStatusType'] = $envelopeStatusType;

        return $this;
    }

    /**
     * Gets isFinalized
     *
     * @return bool|null
     */
    public function getIsFinalized()
    {
        return $this->container['isFinalized'];
    }

    /**
     * Sets isFinalized
     *
     * @param bool|null $isFinalized Once this Envelope has been completed, cancelled, failed auth, declined, or expired
     *
     * @return $this
     */
    public function setIsFinalized($isFinalized)
    {
        $this->container['isFinalized'] = $isFinalized;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


