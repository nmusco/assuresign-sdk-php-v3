<?php
/**
 * SubmissionV32
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)</h3>
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * SubmissionV32 Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubmissionV32 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'submissionV3_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addendums' => '\Nmusco\AssureSign\v3\Model\Addendum[]',
        'documents' => '\Nmusco\AssureSign\v3\Model\Document[]',
        'emailNotifications' => '\Nmusco\AssureSign\v3\Model\EmailNotification[]',
        'emailRecipients' => '\Nmusco\AssureSign\v3\Model\NotificationRecipient[]',
        'envelope' => '\Nmusco\AssureSign\v3\Model\Envelope',
        'signers' => '\Nmusco\AssureSign\v3\Model\SignerV32[]',
        'smsNotifications' => '\Nmusco\AssureSign\v3\Model\SmsNotificationSubmission[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'addendums' => null,
        'documents' => null,
        'emailNotifications' => null,
        'emailRecipients' => null,
        'envelope' => null,
        'signers' => null,
        'smsNotifications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addendums' => 'addendums',
        'documents' => 'documents',
        'emailNotifications' => 'emailNotifications',
        'emailRecipients' => 'emailRecipients',
        'envelope' => 'envelope',
        'signers' => 'signers',
        'smsNotifications' => 'smsNotifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addendums' => 'setAddendums',
        'documents' => 'setDocuments',
        'emailNotifications' => 'setEmailNotifications',
        'emailRecipients' => 'setEmailRecipients',
        'envelope' => 'setEnvelope',
        'signers' => 'setSigners',
        'smsNotifications' => 'setSmsNotifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addendums' => 'getAddendums',
        'documents' => 'getDocuments',
        'emailNotifications' => 'getEmailNotifications',
        'emailRecipients' => 'getEmailRecipients',
        'envelope' => 'getEnvelope',
        'signers' => 'getSigners',
        'smsNotifications' => 'getSmsNotifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addendums'] = isset($data['addendums']) ? $data['addendums'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['emailNotifications'] = isset($data['emailNotifications']) ? $data['emailNotifications'] : null;
        $this->container['emailRecipients'] = isset($data['emailRecipients']) ? $data['emailRecipients'] : null;
        $this->container['envelope'] = isset($data['envelope']) ? $data['envelope'] : null;
        $this->container['signers'] = isset($data['signers']) ? $data['signers'] : null;
        $this->container['smsNotifications'] = isset($data['smsNotifications']) ? $data['smsNotifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addendums
     *
     * @return \Nmusco\AssureSign\v3\Model\Addendum[]|null
     */
    public function getAddendums()
    {
        return $this->container['addendums'];
    }

    /**
     * Sets addendums
     *
     * @param \Nmusco\AssureSign\v3\Model\Addendum[]|null $addendums Provides a list of non-signable addendums associated with the envelope.
     *
     * @return $this
     */
    public function setAddendums($addendums)
    {
        $this->container['addendums'] = $addendums;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Nmusco\AssureSign\v3\Model\Document[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Nmusco\AssureSign\v3\Model\Document[]|null $documents Provides a list of the documents included in the envelope.
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets emailNotifications
     *
     * @return \Nmusco\AssureSign\v3\Model\EmailNotification[]|null
     */
    public function getEmailNotifications()
    {
        return $this->container['emailNotifications'];
    }

    /**
     * Sets emailNotifications
     *
     * @param \Nmusco\AssureSign\v3\Model\EmailNotification[]|null $emailNotifications Provides a list of email notifications that will be sent throughout the envelope life-cycle.
     *
     * @return $this
     */
    public function setEmailNotifications($emailNotifications)
    {
        $this->container['emailNotifications'] = $emailNotifications;

        return $this;
    }

    /**
     * Gets emailRecipients
     *
     * @return \Nmusco\AssureSign\v3\Model\NotificationRecipient[]|null
     */
    public function getEmailRecipients()
    {
        return $this->container['emailRecipients'];
    }

    /**
     * Sets emailRecipients
     *
     * @param \Nmusco\AssureSign\v3\Model\NotificationRecipient[]|null $emailRecipients Provides a list of additional recipients for notifications.
     *
     * @return $this
     */
    public function setEmailRecipients($emailRecipients)
    {
        $this->container['emailRecipients'] = $emailRecipients;

        return $this;
    }

    /**
     * Gets envelope
     *
     * @return \Nmusco\AssureSign\v3\Model\Envelope|null
     */
    public function getEnvelope()
    {
        return $this->container['envelope'];
    }

    /**
     * Sets envelope
     *
     * @param \Nmusco\AssureSign\v3\Model\Envelope|null $envelope envelope
     *
     * @return $this
     */
    public function setEnvelope($envelope)
    {
        $this->container['envelope'] = $envelope;

        return $this;
    }

    /**
     * Gets signers
     *
     * @return \Nmusco\AssureSign\v3\Model\SignerV32[]|null
     */
    public function getSigners()
    {
        return $this->container['signers'];
    }

    /**
     * Sets signers
     *
     * @param \Nmusco\AssureSign\v3\Model\SignerV32[]|null $signers Provides a list of signers defined for the envelope.
     *
     * @return $this
     */
    public function setSigners($signers)
    {
        $this->container['signers'] = $signers;

        return $this;
    }

    /**
     * Gets smsNotifications
     *
     * @return \Nmusco\AssureSign\v3\Model\SmsNotificationSubmission[]|null
     */
    public function getSmsNotifications()
    {
        return $this->container['smsNotifications'];
    }

    /**
     * Sets smsNotifications
     *
     * @param \Nmusco\AssureSign\v3\Model\SmsNotificationSubmission[]|null $smsNotifications Provides a list of SMS notifications that will be sent throughout the envelope life-cycle.
     *
     * @return $this
     */
    public function setSmsNotifications($smsNotifications)
    {
        $this->container['smsNotifications'] = $smsNotifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


