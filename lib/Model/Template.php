<?php
/**
 * Template
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)</h3>
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * Template Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Template implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'template';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'isLocked' => 'bool',
        'isPartial' => 'bool',
        'isArchived' => 'bool',
        'name' => 'string',
        'templateID' => 'string',
        'userAccountID' => 'string',
        'owner' => '\Nmusco\AssureSign\v3\Model\TemplateOwner',
        'accountID' => 'string',
        'accountName' => 'string',
        'tag' => 'string',
        'originalID' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'description' => null,
        'isLocked' => null,
        'isPartial' => null,
        'isArchived' => null,
        'name' => null,
        'templateID' => null,
        'userAccountID' => null,
        'owner' => null,
        'accountID' => null,
        'accountName' => null,
        'tag' => null,
        'originalID' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'isLocked' => 'isLocked',
        'isPartial' => 'isPartial',
        'isArchived' => 'isArchived',
        'name' => 'name',
        'templateID' => 'templateID',
        'userAccountID' => 'userAccountID',
        'owner' => 'owner',
        'accountID' => 'accountID',
        'accountName' => 'accountName',
        'tag' => 'tag',
        'originalID' => 'originalID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'isLocked' => 'setIsLocked',
        'isPartial' => 'setIsPartial',
        'isArchived' => 'setIsArchived',
        'name' => 'setName',
        'templateID' => 'setTemplateID',
        'userAccountID' => 'setUserAccountID',
        'owner' => 'setOwner',
        'accountID' => 'setAccountID',
        'accountName' => 'setAccountName',
        'tag' => 'setTag',
        'originalID' => 'setOriginalID'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'isLocked' => 'getIsLocked',
        'isPartial' => 'getIsPartial',
        'isArchived' => 'getIsArchived',
        'name' => 'getName',
        'templateID' => 'getTemplateID',
        'userAccountID' => 'getUserAccountID',
        'owner' => 'getOwner',
        'accountID' => 'getAccountID',
        'accountName' => 'getAccountName',
        'tag' => 'getTag',
        'originalID' => 'getOriginalID'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['isLocked'] = isset($data['isLocked']) ? $data['isLocked'] : null;
        $this->container['isPartial'] = isset($data['isPartial']) ? $data['isPartial'] : null;
        $this->container['isArchived'] = isset($data['isArchived']) ? $data['isArchived'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['templateID'] = isset($data['templateID']) ? $data['templateID'] : null;
        $this->container['userAccountID'] = isset($data['userAccountID']) ? $data['userAccountID'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['accountID'] = isset($data['accountID']) ? $data['accountID'] : null;
        $this->container['accountName'] = isset($data['accountName']) ? $data['accountName'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['originalID'] = isset($data['originalID']) ? $data['originalID'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Specifies the user provided description for the template.  This is typically used to provide additional detail about the intended use case.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets isLocked
     *
     * @return bool|null
     */
    public function getIsLocked()
    {
        return $this->container['isLocked'];
    }

    /**
     * Sets isLocked
     *
     * @param bool|null $isLocked Specifies whether or not the template is locked to prevent editing.
     *
     * @return $this
     */
    public function setIsLocked($isLocked)
    {
        $this->container['isLocked'] = $isLocked;

        return $this;
    }

    /**
     * Gets isPartial
     *
     * @return bool|null
     */
    public function getIsPartial()
    {
        return $this->container['isPartial'];
    }

    /**
     * Sets isPartial
     *
     * @param bool|null $isPartial Specifies whether or not the template contains only a partial definition.  If true, additional data beyond placeholder values must be provided as part of the submission.  If false, the template can be submitted with only placeholder values provided.
     *
     * @return $this
     */
    public function setIsPartial($isPartial)
    {
        $this->container['isPartial'] = $isPartial;

        return $this;
    }

    /**
     * Gets isArchived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['isArchived'];
    }

    /**
     * Sets isArchived
     *
     * @param bool|null $isArchived Specifies whether or not the template is archived
     *
     * @return $this
     */
    public function setIsArchived($isArchived)
    {
        $this->container['isArchived'] = $isArchived;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Specifies the name of the template.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets templateID
     *
     * @return string|null
     */
    public function getTemplateID()
    {
        return $this->container['templateID'];
    }

    /**
     * Sets templateID
     *
     * @param string|null $templateID Specifies the unique identifier of the template.
     *
     * @return $this
     */
    public function setTemplateID($templateID)
    {
        $this->container['templateID'] = $templateID;

        return $this;
    }

    /**
     * Gets userAccountID
     *
     * @return string|null
     */
    public function getUserAccountID()
    {
        return $this->container['userAccountID'];
    }

    /**
     * Sets userAccountID
     *
     * @param string|null $userAccountID Specifies the unique identifier of the user to whom the template belongs.
     *
     * @return $this
     */
    public function setUserAccountID($userAccountID)
    {
        $this->container['userAccountID'] = $userAccountID;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Nmusco\AssureSign\v3\Model\TemplateOwner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Nmusco\AssureSign\v3\Model\TemplateOwner|null $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets accountID
     *
     * @return string|null
     */
    public function getAccountID()
    {
        return $this->container['accountID'];
    }

    /**
     * Sets accountID
     *
     * @param string|null $accountID Specifies the unique identifier of the account to which the template belongs.
     *
     * @return $this
     */
    public function setAccountID($accountID)
    {
        $this->container['accountID'] = $accountID;

        return $this;
    }

    /**
     * Gets accountName
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['accountName'];
    }

    /**
     * Sets accountName
     *
     * @param string|null $accountName Specifies the name of the account to which the template belongs.
     *
     * @return $this
     */
    public function setAccountName($accountName)
    {
        $this->container['accountName'] = $accountName;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag A generic holder of any information you would like to provide
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets originalID
     *
     * @return string|null
     */
    public function getOriginalID()
    {
        return $this->container['originalID'];
    }

    /**
     * Sets originalID
     *
     * @param string|null $originalID Original ID of Imported Template
     *
     * @return $this
     */
    public function setOriginalID($originalID)
    {
        $this->container['originalID'] = $originalID;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


