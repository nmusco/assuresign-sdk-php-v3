<?php
/**
 * Submission
 *
 * PHP version 5
 *
 * @category Class
 * @package  AssureSign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * <h2>AssureSign DocumentNOW electronic signature APIs (envelopes and documents)</h2><h3>For DocumentNOW user and account management APIs, go to [Account API](https://localhost:44304/api/v3.6/account)</h3>
 *
 * OpenAPI spec version: 3.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Model;

use \ArrayAccess;
use \Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * Submission Class Doc Comment
 *
 * @category Class
 * @package  AssureSign
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Submission implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'submission';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'addendums' => '\Nmusco\AssureSign\v3\Model\Addendum[]',
'documents' => '\Nmusco\AssureSign\v3\Model\Document[]',
'email_notifications' => '\Nmusco\AssureSign\v3\Model\EmailNotification[]',
'envelope' => '\Nmusco\AssureSign\v3\Model\Envelope',
'notification_recipients' => '\Nmusco\AssureSign\v3\Model\NotificationRecipient[]',
'signers' => '\Nmusco\AssureSign\v3\Model\Signer[]',
'sms_notifications' => '\Nmusco\AssureSign\v3\Model\SmsNotificationSubmission[]',
'steps' => '\Nmusco\AssureSign\v3\Model\WorkflowStep[]',
'conditional_logic_items' => '\Nmusco\AssureSign\v3\Model\ConditionalLogicItem[]',
'web_hook_notifications' => '\Nmusco\AssureSign\v3\Model\SubmissionWebHook[]',
'document_transmissions' => '\Nmusco\AssureSign\v3\Model\SubmissionDocumentTransmission[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'addendums' => null,
'documents' => null,
'email_notifications' => null,
'envelope' => null,
'notification_recipients' => null,
'signers' => null,
'sms_notifications' => null,
'steps' => null,
'conditional_logic_items' => null,
'web_hook_notifications' => null,
'document_transmissions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addendums' => 'addendums',
'documents' => 'documents',
'email_notifications' => 'emailNotifications',
'envelope' => 'envelope',
'notification_recipients' => 'notificationRecipients',
'signers' => 'signers',
'sms_notifications' => 'smsNotifications',
'steps' => 'steps',
'conditional_logic_items' => 'conditionalLogicItems',
'web_hook_notifications' => 'webHookNotifications',
'document_transmissions' => 'documentTransmissions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addendums' => 'setAddendums',
'documents' => 'setDocuments',
'email_notifications' => 'setEmailNotifications',
'envelope' => 'setEnvelope',
'notification_recipients' => 'setNotificationRecipients',
'signers' => 'setSigners',
'sms_notifications' => 'setSmsNotifications',
'steps' => 'setSteps',
'conditional_logic_items' => 'setConditionalLogicItems',
'web_hook_notifications' => 'setWebHookNotifications',
'document_transmissions' => 'setDocumentTransmissions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addendums' => 'getAddendums',
'documents' => 'getDocuments',
'email_notifications' => 'getEmailNotifications',
'envelope' => 'getEnvelope',
'notification_recipients' => 'getNotificationRecipients',
'signers' => 'getSigners',
'sms_notifications' => 'getSmsNotifications',
'steps' => 'getSteps',
'conditional_logic_items' => 'getConditionalLogicItems',
'web_hook_notifications' => 'getWebHookNotifications',
'document_transmissions' => 'getDocumentTransmissions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addendums'] = isset($data['addendums']) ? $data['addendums'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['email_notifications'] = isset($data['email_notifications']) ? $data['email_notifications'] : null;
        $this->container['envelope'] = isset($data['envelope']) ? $data['envelope'] : null;
        $this->container['notification_recipients'] = isset($data['notification_recipients']) ? $data['notification_recipients'] : null;
        $this->container['signers'] = isset($data['signers']) ? $data['signers'] : null;
        $this->container['sms_notifications'] = isset($data['sms_notifications']) ? $data['sms_notifications'] : null;
        $this->container['steps'] = isset($data['steps']) ? $data['steps'] : null;
        $this->container['conditional_logic_items'] = isset($data['conditional_logic_items']) ? $data['conditional_logic_items'] : null;
        $this->container['web_hook_notifications'] = isset($data['web_hook_notifications']) ? $data['web_hook_notifications'] : null;
        $this->container['document_transmissions'] = isset($data['document_transmissions']) ? $data['document_transmissions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addendums
     *
     * @return \Nmusco\AssureSign\v3\Model\Addendum[]
     */
    public function getAddendums()
    {
        return $this->container['addendums'];
    }

    /**
     * Sets addendums
     *
     * @param \Nmusco\AssureSign\v3\Model\Addendum[] $addendums Provides a list of non-signable addendums associated with the envelope.
     *
     * @return $this
     */
    public function setAddendums($addendums)
    {
        $this->container['addendums'] = $addendums;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Nmusco\AssureSign\v3\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Nmusco\AssureSign\v3\Model\Document[] $documents Provides a list of the documents included in the envelope.
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets email_notifications
     *
     * @return \Nmusco\AssureSign\v3\Model\EmailNotification[]
     */
    public function getEmailNotifications()
    {
        return $this->container['email_notifications'];
    }

    /**
     * Sets email_notifications
     *
     * @param \Nmusco\AssureSign\v3\Model\EmailNotification[] $email_notifications Provides a list of email notifications that will be sent throughout the envelope life-cycle.
     *
     * @return $this
     */
    public function setEmailNotifications($email_notifications)
    {
        $this->container['email_notifications'] = $email_notifications;

        return $this;
    }

    /**
     * Gets envelope
     *
     * @return \Nmusco\AssureSign\v3\Model\Envelope
     */
    public function getEnvelope()
    {
        return $this->container['envelope'];
    }

    /**
     * Sets envelope
     *
     * @param \Nmusco\AssureSign\v3\Model\Envelope $envelope envelope
     *
     * @return $this
     */
    public function setEnvelope($envelope)
    {
        $this->container['envelope'] = $envelope;

        return $this;
    }

    /**
     * Gets notification_recipients
     *
     * @return \Nmusco\AssureSign\v3\Model\NotificationRecipient[]
     */
    public function getNotificationRecipients()
    {
        return $this->container['notification_recipients'];
    }

    /**
     * Sets notification_recipients
     *
     * @param \Nmusco\AssureSign\v3\Model\NotificationRecipient[] $notification_recipients Provides a list of additional recipients for notifications.
     *
     * @return $this
     */
    public function setNotificationRecipients($notification_recipients)
    {
        $this->container['notification_recipients'] = $notification_recipients;

        return $this;
    }

    /**
     * Gets signers
     *
     * @return \Nmusco\AssureSign\v3\Model\Signer[]
     */
    public function getSigners()
    {
        return $this->container['signers'];
    }

    /**
     * Sets signers
     *
     * @param \Nmusco\AssureSign\v3\Model\Signer[] $signers Provides a list of signers defined for the envelope.
     *
     * @return $this
     */
    public function setSigners($signers)
    {
        $this->container['signers'] = $signers;

        return $this;
    }

    /**
     * Gets sms_notifications
     *
     * @return \Nmusco\AssureSign\v3\Model\SmsNotificationSubmission[]
     */
    public function getSmsNotifications()
    {
        return $this->container['sms_notifications'];
    }

    /**
     * Sets sms_notifications
     *
     * @param \Nmusco\AssureSign\v3\Model\SmsNotificationSubmission[] $sms_notifications Provides a list of SMS notifications that will be sent throughout the envelope life-cycle.
     *
     * @return $this
     */
    public function setSmsNotifications($sms_notifications)
    {
        $this->container['sms_notifications'] = $sms_notifications;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \Nmusco\AssureSign\v3\Model\WorkflowStep[]
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \Nmusco\AssureSign\v3\Model\WorkflowStep[] $steps Provides a list of workflow steps to be used when using a Custom envelope workflow type.
     *
     * @return $this
     */
    public function setSteps($steps)
    {
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets conditional_logic_items
     *
     * @return \Nmusco\AssureSign\v3\Model\ConditionalLogicItem[]
     */
    public function getConditionalLogicItems()
    {
        return $this->container['conditional_logic_items'];
    }

    /**
     * Sets conditional_logic_items
     *
     * @param \Nmusco\AssureSign\v3\Model\ConditionalLogicItem[] $conditional_logic_items Conditional logic allows you to create rules that test conditions during signing to change elements of the signing process.
     *
     * @return $this
     */
    public function setConditionalLogicItems($conditional_logic_items)
    {
        $this->container['conditional_logic_items'] = $conditional_logic_items;

        return $this;
    }

    /**
     * Gets web_hook_notifications
     *
     * @return \Nmusco\AssureSign\v3\Model\SubmissionWebHook[]
     */
    public function getWebHookNotifications()
    {
        return $this->container['web_hook_notifications'];
    }

    /**
     * Sets web_hook_notifications
     *
     * @param \Nmusco\AssureSign\v3\Model\SubmissionWebHook[] $web_hook_notifications Provides a list of webhooks in a given stage
     *
     * @return $this
     */
    public function setWebHookNotifications($web_hook_notifications)
    {
        $this->container['web_hook_notifications'] = $web_hook_notifications;

        return $this;
    }

    /**
     * Gets document_transmissions
     *
     * @return \Nmusco\AssureSign\v3\Model\SubmissionDocumentTransmission[]
     */
    public function getDocumentTransmissions()
    {
        return $this->container['document_transmissions'];
    }

    /**
     * Sets document_transmissions
     *
     * @param \Nmusco\AssureSign\v3\Model\SubmissionDocumentTransmission[] $document_transmissions Provides a list of document transmissions to be executed at Envelope Complete
     *
     * @return $this
     */
    public function setDocumentTransmissions($document_transmissions)
    {
        $this->container['document_transmissions'] = $document_transmissions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
