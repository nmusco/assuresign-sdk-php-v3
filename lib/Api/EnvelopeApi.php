<?php
/**
 * EnvelopeApi
 * PHP version 5
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AssureSign DocumentNOW API Documentation
 *
 * AssureSign DocumentNOW electronic signature APIs (envelopes and documents) For DocumentNOW user and account management APIs, go to [Account API](https://account.assuresign.net/api/v3.6/account)
 *
 * The version of the OpenAPI document: 3.6
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Nmusco\AssureSign\v3\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nmusco\AssureSign\v3\ApiException;
use Nmusco\AssureSign\v3\Configuration;
use Nmusco\AssureSign\v3\HeaderSelector;
use Nmusco\AssureSign\v3\ObjectSerializer;

/**
 * EnvelopeApi Class Doc Comment
 *
 * @category Class
 * @package  Nmusco\AssureSign\v3
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnvelopeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelEnvelope
     *
     * Cancel an active envelope
     *
     * @param  string $envelope_id envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\CancelEnvelopeRequest $cancel_envelope_request cancel_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\CancelEnvelopeResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse
     */
    public function cancelEnvelope($envelope_id, $cancel_envelope_request, $x_as_user_context = null)
    {
        list($response) = $this->cancelEnvelopeWithHttpInfo($envelope_id, $cancel_envelope_request, $x_as_user_context);
        return $response;
    }

    /**
     * Operation cancelEnvelopeWithHttpInfo
     *
     * Cancel an active envelope
     *
     * @param  string $envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\CancelEnvelopeRequest $cancel_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\CancelEnvelopeResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelEnvelopeWithHttpInfo($envelope_id, $cancel_envelope_request, $x_as_user_context = null)
    {
        $request = $this->cancelEnvelopeRequest($envelope_id, $cancel_envelope_request, $x_as_user_context);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\CancelEnvelopeResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\CancelEnvelopeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\CancelEnvelopeResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\CancelEnvelopeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelEnvelopeAsync
     *
     * Cancel an active envelope
     *
     * @param  string $envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\CancelEnvelopeRequest $cancel_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelEnvelopeAsync($envelope_id, $cancel_envelope_request, $x_as_user_context = null)
    {
        return $this->cancelEnvelopeAsyncWithHttpInfo($envelope_id, $cancel_envelope_request, $x_as_user_context)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelEnvelopeAsyncWithHttpInfo
     *
     * Cancel an active envelope
     *
     * @param  string $envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\CancelEnvelopeRequest $cancel_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelEnvelopeAsyncWithHttpInfo($envelope_id, $cancel_envelope_request, $x_as_user_context = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\CancelEnvelopeResponse';
        $request = $this->cancelEnvelopeRequest($envelope_id, $cancel_envelope_request, $x_as_user_context);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelEnvelope'
     *
     * @param  string $envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\CancelEnvelopeRequest $cancel_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelEnvelopeRequest($envelope_id, $cancel_envelope_request, $x_as_user_context = null)
    {
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null || (is_array($envelope_id) && count($envelope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_id when calling cancelEnvelope'
            );
        }
        // verify the required parameter 'cancel_envelope_request' is set
        if ($cancel_envelope_request === null || (is_array($cancel_envelope_request) && count($cancel_envelope_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancel_envelope_request when calling cancelEnvelope'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }

        // path params
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelope_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cancel_envelope_request)) {
            $_tempBody = $cancel_envelope_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadEnvelope
     *
     * Download a completed envelope
     *
     * @param  string $envelope_id envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\DownloadEnvelopeRequest $download_envelope_request download_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\DownloadEnvelopeResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse
     */
    public function downloadEnvelope($envelope_id, $download_envelope_request, $x_as_user_context = null)
    {
        list($response) = $this->downloadEnvelopeWithHttpInfo($envelope_id, $download_envelope_request, $x_as_user_context);
        return $response;
    }

    /**
     * Operation downloadEnvelopeWithHttpInfo
     *
     * Download a completed envelope
     *
     * @param  string $envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\DownloadEnvelopeRequest $download_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\DownloadEnvelopeResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadEnvelopeWithHttpInfo($envelope_id, $download_envelope_request, $x_as_user_context = null)
    {
        $request = $this->downloadEnvelopeRequest($envelope_id, $download_envelope_request, $x_as_user_context);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\DownloadEnvelopeResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\DownloadEnvelopeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\DownloadEnvelopeResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\DownloadEnvelopeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadEnvelopeAsync
     *
     * Download a completed envelope
     *
     * @param  string $envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\DownloadEnvelopeRequest $download_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadEnvelopeAsync($envelope_id, $download_envelope_request, $x_as_user_context = null)
    {
        return $this->downloadEnvelopeAsyncWithHttpInfo($envelope_id, $download_envelope_request, $x_as_user_context)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadEnvelopeAsyncWithHttpInfo
     *
     * Download a completed envelope
     *
     * @param  string $envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\DownloadEnvelopeRequest $download_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadEnvelopeAsyncWithHttpInfo($envelope_id, $download_envelope_request, $x_as_user_context = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\DownloadEnvelopeResponse';
        $request = $this->downloadEnvelopeRequest($envelope_id, $download_envelope_request, $x_as_user_context);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadEnvelope'
     *
     * @param  string $envelope_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\DownloadEnvelopeRequest $download_envelope_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadEnvelopeRequest($envelope_id, $download_envelope_request, $x_as_user_context = null)
    {
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null || (is_array($envelope_id) && count($envelope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_id when calling downloadEnvelope'
            );
        }
        // verify the required parameter 'download_envelope_request' is set
        if ($download_envelope_request === null || (is_array($download_envelope_request) && count($download_envelope_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $download_envelope_request when calling downloadEnvelope'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }

        // path params
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelope_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($download_envelope_request)) {
            $_tempBody = $download_envelope_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation envelopeHistory
     *
     * Get envelope history
     *
     * @param  string $envelope_id envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\EnvelopeHistoryResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse
     */
    public function envelopeHistory($envelope_id, $x_as_user_context = null)
    {
        list($response) = $this->envelopeHistoryWithHttpInfo($envelope_id, $x_as_user_context);
        return $response;
    }

    /**
     * Operation envelopeHistoryWithHttpInfo
     *
     * Get envelope history
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\EnvelopeHistoryResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function envelopeHistoryWithHttpInfo($envelope_id, $x_as_user_context = null)
    {
        $request = $this->envelopeHistoryRequest($envelope_id, $x_as_user_context);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\EnvelopeHistoryResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\EnvelopeHistoryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\EnvelopeHistoryResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\EnvelopeHistoryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation envelopeHistoryAsync
     *
     * Get envelope history
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeHistoryAsync($envelope_id, $x_as_user_context = null)
    {
        return $this->envelopeHistoryAsyncWithHttpInfo($envelope_id, $x_as_user_context)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation envelopeHistoryAsyncWithHttpInfo
     *
     * Get envelope history
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeHistoryAsyncWithHttpInfo($envelope_id, $x_as_user_context = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\EnvelopeHistoryResponse';
        $request = $this->envelopeHistoryRequest($envelope_id, $x_as_user_context);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'envelopeHistory'
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function envelopeHistoryRequest($envelope_id, $x_as_user_context = null)
    {
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null || (is_array($envelope_id) && count($envelope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_id when calling envelopeHistory'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }

        // path params
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelope_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation envelopeStatus
     *
     * Get envelope status
     *
     * @param  string $envelope_id envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\EnvelopeStatusResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse
     */
    public function envelopeStatus($envelope_id, $x_as_user_context = null)
    {
        list($response) = $this->envelopeStatusWithHttpInfo($envelope_id, $x_as_user_context);
        return $response;
    }

    /**
     * Operation envelopeStatusWithHttpInfo
     *
     * Get envelope status
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\EnvelopeStatusResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function envelopeStatusWithHttpInfo($envelope_id, $x_as_user_context = null)
    {
        $request = $this->envelopeStatusRequest($envelope_id, $x_as_user_context);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\EnvelopeStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\EnvelopeStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\EnvelopeStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\EnvelopeStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation envelopeStatusAsync
     *
     * Get envelope status
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeStatusAsync($envelope_id, $x_as_user_context = null)
    {
        return $this->envelopeStatusAsyncWithHttpInfo($envelope_id, $x_as_user_context)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation envelopeStatusAsyncWithHttpInfo
     *
     * Get envelope status
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function envelopeStatusAsyncWithHttpInfo($envelope_id, $x_as_user_context = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\EnvelopeStatusResponse';
        $request = $this->envelopeStatusRequest($envelope_id, $x_as_user_context);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'envelopeStatus'
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function envelopeStatusRequest($envelope_id, $x_as_user_context = null)
    {
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null || (is_array($envelope_id) && count($envelope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_id when calling envelopeStatus'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }

        // path params
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelope_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessLinks
     *
     * Get access links for a specific user in an envelope
     *
     * @param  string $envelope_id envelope_id (required)
     * @param  string $document_type document_type (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signer_email signer_email (optional)
     * @param  string $signer_mobile_phone signer_mobile_phone (optional)
     * @param  string $link_expiration_date link_expiration_date (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\GetAccessLinkResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse
     */
    public function getAccessLinks($envelope_id, $document_type, $x_as_user_context = null, $signer_email = null, $signer_mobile_phone = null, $link_expiration_date = null)
    {
        list($response) = $this->getAccessLinksWithHttpInfo($envelope_id, $document_type, $x_as_user_context, $signer_email, $signer_mobile_phone, $link_expiration_date);
        return $response;
    }

    /**
     * Operation getAccessLinksWithHttpInfo
     *
     * Get access links for a specific user in an envelope
     *
     * @param  string $envelope_id (required)
     * @param  string $document_type (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signer_email (optional)
     * @param  string $signer_mobile_phone (optional)
     * @param  string $link_expiration_date (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\GetAccessLinkResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessLinksWithHttpInfo($envelope_id, $document_type, $x_as_user_context = null, $signer_email = null, $signer_mobile_phone = null, $link_expiration_date = null)
    {
        $request = $this->getAccessLinksRequest($envelope_id, $document_type, $x_as_user_context, $signer_email, $signer_mobile_phone, $link_expiration_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\GetAccessLinkResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\GetAccessLinkResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\GetAccessLinkResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\GetAccessLinkResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessLinksAsync
     *
     * Get access links for a specific user in an envelope
     *
     * @param  string $envelope_id (required)
     * @param  string $document_type (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signer_email (optional)
     * @param  string $signer_mobile_phone (optional)
     * @param  string $link_expiration_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessLinksAsync($envelope_id, $document_type, $x_as_user_context = null, $signer_email = null, $signer_mobile_phone = null, $link_expiration_date = null)
    {
        return $this->getAccessLinksAsyncWithHttpInfo($envelope_id, $document_type, $x_as_user_context, $signer_email, $signer_mobile_phone, $link_expiration_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccessLinksAsyncWithHttpInfo
     *
     * Get access links for a specific user in an envelope
     *
     * @param  string $envelope_id (required)
     * @param  string $document_type (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signer_email (optional)
     * @param  string $signer_mobile_phone (optional)
     * @param  string $link_expiration_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessLinksAsyncWithHttpInfo($envelope_id, $document_type, $x_as_user_context = null, $signer_email = null, $signer_mobile_phone = null, $link_expiration_date = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\GetAccessLinkResponse';
        $request = $this->getAccessLinksRequest($envelope_id, $document_type, $x_as_user_context, $signer_email, $signer_mobile_phone, $link_expiration_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessLinks'
     *
     * @param  string $envelope_id (required)
     * @param  string $document_type (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $signer_email (optional)
     * @param  string $signer_mobile_phone (optional)
     * @param  string $link_expiration_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccessLinksRequest($envelope_id, $document_type, $x_as_user_context = null, $signer_email = null, $signer_mobile_phone = null, $link_expiration_date = null)
    {
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null || (is_array($envelope_id) && count($envelope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_id when calling getAccessLinks'
            );
        }
        // verify the required parameter 'document_type' is set
        if ($document_type === null || (is_array($document_type) && count($document_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type when calling getAccessLinks'
            );
        }

        $resourcePath = '/envelope/{envelopeID}/accessLinks/{documentType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($signer_email !== null) {
            if('form' === 'form' && is_array($signer_email)) {
                foreach($signer_email as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['signerEmail'] = $signer_email;
            }
        }
        // query params
        if ($signer_mobile_phone !== null) {
            if('form' === 'form' && is_array($signer_mobile_phone)) {
                foreach($signer_mobile_phone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['signerMobilePhone'] = $signer_mobile_phone;
            }
        }
        // query params
        if ($link_expiration_date !== null) {
            if('form' === 'form' && is_array($link_expiration_date)) {
                foreach($link_expiration_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['linkExpirationDate'] = $link_expiration_date;
            }
        }

        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }

        // path params
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelope_id),
                $resourcePath
            );
        }
        // path params
        if ($document_type !== null) {
            $resourcePath = str_replace(
                '{' . 'documentType' . '}',
                ObjectSerializer::toPathValue($document_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelope
     *
     * Envelope data
     *
     * @param  string $envelope_id envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\GetEnvelopeResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse
     */
    public function getEnvelope($envelope_id, $x_as_user_context = null)
    {
        list($response) = $this->getEnvelopeWithHttpInfo($envelope_id, $x_as_user_context);
        return $response;
    }

    /**
     * Operation getEnvelopeWithHttpInfo
     *
     * Envelope data
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\GetEnvelopeResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeWithHttpInfo($envelope_id, $x_as_user_context = null)
    {
        $request = $this->getEnvelopeRequest($envelope_id, $x_as_user_context);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\GetEnvelopeResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\GetEnvelopeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\GetEnvelopeResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\GetEnvelopeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeAsync
     *
     * Envelope data
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeAsync($envelope_id, $x_as_user_context = null)
    {
        return $this->getEnvelopeAsyncWithHttpInfo($envelope_id, $x_as_user_context)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeAsyncWithHttpInfo
     *
     * Envelope data
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeAsyncWithHttpInfo($envelope_id, $x_as_user_context = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\GetEnvelopeResponse';
        $request = $this->getEnvelopeRequest($envelope_id, $x_as_user_context);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelope'
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeRequest($envelope_id, $x_as_user_context = null)
    {
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null || (is_array($envelope_id) && count($envelope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_id when calling getEnvelope'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }

        // path params
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelope_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEnvelopeValues
     *
     * Get a list of field (JotBlock) values for an envelope
     *
     * @param  string $envelope_id envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\GetEnvelopeValuesResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorDeletedRequestResponse
     */
    public function getEnvelopeValues($envelope_id, $x_as_user_context = null)
    {
        list($response) = $this->getEnvelopeValuesWithHttpInfo($envelope_id, $x_as_user_context);
        return $response;
    }

    /**
     * Operation getEnvelopeValuesWithHttpInfo
     *
     * Get a list of field (JotBlock) values for an envelope
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\GetEnvelopeValuesResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorDeletedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEnvelopeValuesWithHttpInfo($envelope_id, $x_as_user_context = null)
    {
        $request = $this->getEnvelopeValuesRequest($envelope_id, $x_as_user_context);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\GetEnvelopeValuesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\GetEnvelopeValuesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorDeletedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorDeletedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\GetEnvelopeValuesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\GetEnvelopeValuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorDeletedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEnvelopeValuesAsync
     *
     * Get a list of field (JotBlock) values for an envelope
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeValuesAsync($envelope_id, $x_as_user_context = null)
    {
        return $this->getEnvelopeValuesAsyncWithHttpInfo($envelope_id, $x_as_user_context)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEnvelopeValuesAsyncWithHttpInfo
     *
     * Get a list of field (JotBlock) values for an envelope
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEnvelopeValuesAsyncWithHttpInfo($envelope_id, $x_as_user_context = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\GetEnvelopeValuesResponse';
        $request = $this->getEnvelopeValuesRequest($envelope_id, $x_as_user_context);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEnvelopeValues'
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEnvelopeValuesRequest($envelope_id, $x_as_user_context = null)
    {
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null || (is_array($envelope_id) && count($envelope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_id when calling getEnvelopeValues'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }

        // path params
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelope_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSigningLinks
     *
     * Get signing links for envelope signers
     *
     * @param  string $envelope_id envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $include_only_current_signers include_only_current_signers (optional)
     * @param  bool $is_authenticated is_authenticated (optional)
     * @param  string $redirect_url redirect_url (optional)
     * @param  string $link_expiration_date link_expiration_date (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\GetSigningLinksResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse
     */
    public function getSigningLinks($envelope_id, $x_as_user_context = null, $include_only_current_signers = null, $is_authenticated = null, $redirect_url = null, $link_expiration_date = null)
    {
        list($response) = $this->getSigningLinksWithHttpInfo($envelope_id, $x_as_user_context, $include_only_current_signers, $is_authenticated, $redirect_url, $link_expiration_date);
        return $response;
    }

    /**
     * Operation getSigningLinksWithHttpInfo
     *
     * Get signing links for envelope signers
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $include_only_current_signers (optional)
     * @param  bool $is_authenticated (optional)
     * @param  string $redirect_url (optional)
     * @param  string $link_expiration_date (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\GetSigningLinksResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSigningLinksWithHttpInfo($envelope_id, $x_as_user_context = null, $include_only_current_signers = null, $is_authenticated = null, $redirect_url = null, $link_expiration_date = null)
    {
        $request = $this->getSigningLinksRequest($envelope_id, $x_as_user_context, $include_only_current_signers, $is_authenticated, $redirect_url, $link_expiration_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\GetSigningLinksResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\GetSigningLinksResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\GetSigningLinksResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\GetSigningLinksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSigningLinksAsync
     *
     * Get signing links for envelope signers
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $include_only_current_signers (optional)
     * @param  bool $is_authenticated (optional)
     * @param  string $redirect_url (optional)
     * @param  string $link_expiration_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSigningLinksAsync($envelope_id, $x_as_user_context = null, $include_only_current_signers = null, $is_authenticated = null, $redirect_url = null, $link_expiration_date = null)
    {
        return $this->getSigningLinksAsyncWithHttpInfo($envelope_id, $x_as_user_context, $include_only_current_signers, $is_authenticated, $redirect_url, $link_expiration_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSigningLinksAsyncWithHttpInfo
     *
     * Get signing links for envelope signers
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $include_only_current_signers (optional)
     * @param  bool $is_authenticated (optional)
     * @param  string $redirect_url (optional)
     * @param  string $link_expiration_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSigningLinksAsyncWithHttpInfo($envelope_id, $x_as_user_context = null, $include_only_current_signers = null, $is_authenticated = null, $redirect_url = null, $link_expiration_date = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\GetSigningLinksResponse';
        $request = $this->getSigningLinksRequest($envelope_id, $x_as_user_context, $include_only_current_signers, $is_authenticated, $redirect_url, $link_expiration_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSigningLinks'
     *
     * @param  string $envelope_id (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  bool $include_only_current_signers (optional)
     * @param  bool $is_authenticated (optional)
     * @param  string $redirect_url (optional)
     * @param  string $link_expiration_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSigningLinksRequest($envelope_id, $x_as_user_context = null, $include_only_current_signers = null, $is_authenticated = null, $redirect_url = null, $link_expiration_date = null)
    {
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null || (is_array($envelope_id) && count($envelope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_id when calling getSigningLinks'
            );
        }

        $resourcePath = '/envelope/{envelopeID}/signingLinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_only_current_signers !== null) {
            if('form' === 'form' && is_array($include_only_current_signers)) {
                foreach($include_only_current_signers as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeOnlyCurrentSigners'] = $include_only_current_signers;
            }
        }
        // query params
        if ($is_authenticated !== null) {
            if('form' === 'form' && is_array($is_authenticated)) {
                foreach($is_authenticated as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['isAuthenticated'] = $is_authenticated;
            }
        }
        // query params
        if ($redirect_url !== null) {
            if('form' === 'form' && is_array($redirect_url)) {
                foreach($redirect_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['redirectUrl'] = $redirect_url;
            }
        }
        // query params
        if ($link_expiration_date !== null) {
            if('form' === 'form' && is_array($link_expiration_date)) {
                foreach($link_expiration_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['linkExpirationDate'] = $link_expiration_date;
            }
        }

        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }

        // path params
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelope_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listEnvelopes
     *
     * Get envelopes matching given criteria
     *
     * @param  string $date_filter date_filter (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelope_name envelope_name (optional)
     * @param  string $signer_name signer_name (optional)
     * @param  string $order_id order_id (optional)
     * @param  string $email_address email_address (optional)
     * @param  string $mobile_phone mobile_phone (optional)
     * @param  string $from_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  string $to_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  bool $query_child_accounts query_child_accounts (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\ListEnvelopesResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse
     */
    public function listEnvelopes($date_filter, $x_as_user_context = null, $envelope_name = null, $signer_name = null, $order_id = null, $email_address = null, $mobile_phone = null, $from_date = null, $to_date = null, $query_child_accounts = null)
    {
        list($response) = $this->listEnvelopesWithHttpInfo($date_filter, $x_as_user_context, $envelope_name, $signer_name, $order_id, $email_address, $mobile_phone, $from_date, $to_date, $query_child_accounts);
        return $response;
    }

    /**
     * Operation listEnvelopesWithHttpInfo
     *
     * Get envelopes matching given criteria
     *
     * @param  string $date_filter (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelope_name (optional)
     * @param  string $signer_name (optional)
     * @param  string $order_id (optional)
     * @param  string $email_address (optional)
     * @param  string $mobile_phone (optional)
     * @param  string $from_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  string $to_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  bool $query_child_accounts (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\ListEnvelopesResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listEnvelopesWithHttpInfo($date_filter, $x_as_user_context = null, $envelope_name = null, $signer_name = null, $order_id = null, $email_address = null, $mobile_phone = null, $from_date = null, $to_date = null, $query_child_accounts = null)
    {
        $request = $this->listEnvelopesRequest($date_filter, $x_as_user_context, $envelope_name, $signer_name, $order_id, $email_address, $mobile_phone, $from_date, $to_date, $query_child_accounts);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\ListEnvelopesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ListEnvelopesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\ListEnvelopesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ListEnvelopesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listEnvelopesAsync
     *
     * Get envelopes matching given criteria
     *
     * @param  string $date_filter (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelope_name (optional)
     * @param  string $signer_name (optional)
     * @param  string $order_id (optional)
     * @param  string $email_address (optional)
     * @param  string $mobile_phone (optional)
     * @param  string $from_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  string $to_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  bool $query_child_accounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEnvelopesAsync($date_filter, $x_as_user_context = null, $envelope_name = null, $signer_name = null, $order_id = null, $email_address = null, $mobile_phone = null, $from_date = null, $to_date = null, $query_child_accounts = null)
    {
        return $this->listEnvelopesAsyncWithHttpInfo($date_filter, $x_as_user_context, $envelope_name, $signer_name, $order_id, $email_address, $mobile_phone, $from_date, $to_date, $query_child_accounts)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listEnvelopesAsyncWithHttpInfo
     *
     * Get envelopes matching given criteria
     *
     * @param  string $date_filter (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelope_name (optional)
     * @param  string $signer_name (optional)
     * @param  string $order_id (optional)
     * @param  string $email_address (optional)
     * @param  string $mobile_phone (optional)
     * @param  string $from_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  string $to_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  bool $query_child_accounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEnvelopesAsyncWithHttpInfo($date_filter, $x_as_user_context = null, $envelope_name = null, $signer_name = null, $order_id = null, $email_address = null, $mobile_phone = null, $from_date = null, $to_date = null, $query_child_accounts = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\ListEnvelopesResponse';
        $request = $this->listEnvelopesRequest($date_filter, $x_as_user_context, $envelope_name, $signer_name, $order_id, $email_address, $mobile_phone, $from_date, $to_date, $query_child_accounts);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listEnvelopes'
     *
     * @param  string $date_filter (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     * @param  string $envelope_name (optional)
     * @param  string $signer_name (optional)
     * @param  string $order_id (optional)
     * @param  string $email_address (optional)
     * @param  string $mobile_phone (optional)
     * @param  string $from_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  string $to_date Can include time in the following format(s). MM/dd/yyyy HH:mm (24 hour clock) 12/01/2020 13:01 | MM/dd/yyyy hh:mm tt (12 hour clock) 12/01/2020 01:01 PM | MM/dd/yyyy (No time specified will default to 12 am) 12/01/2020 (optional)
     * @param  bool $query_child_accounts (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listEnvelopesRequest($date_filter, $x_as_user_context = null, $envelope_name = null, $signer_name = null, $order_id = null, $email_address = null, $mobile_phone = null, $from_date = null, $to_date = null, $query_child_accounts = null)
    {
        // verify the required parameter 'date_filter' is set
        if ($date_filter === null || (is_array($date_filter) && count($date_filter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_filter when calling listEnvelopes'
            );
        }

        $resourcePath = '/envelopes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date_filter !== null) {
            if('form' === 'form' && is_array($date_filter)) {
                foreach($date_filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateFilter'] = $date_filter;
            }
        }
        // query params
        if ($envelope_name !== null) {
            if('form' === 'form' && is_array($envelope_name)) {
                foreach($envelope_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['envelopeName'] = $envelope_name;
            }
        }
        // query params
        if ($signer_name !== null) {
            if('form' === 'form' && is_array($signer_name)) {
                foreach($signer_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['signerName'] = $signer_name;
            }
        }
        // query params
        if ($order_id !== null) {
            if('form' === 'form' && is_array($order_id)) {
                foreach($order_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderID'] = $order_id;
            }
        }
        // query params
        if ($email_address !== null) {
            if('form' === 'form' && is_array($email_address)) {
                foreach($email_address as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['emailAddress'] = $email_address;
            }
        }
        // query params
        if ($mobile_phone !== null) {
            if('form' === 'form' && is_array($mobile_phone)) {
                foreach($mobile_phone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['mobilePhone'] = $mobile_phone;
            }
        }
        // query params
        if ($from_date !== null) {
            if('form' === 'form' && is_array($from_date)) {
                foreach($from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fromDate'] = $from_date;
            }
        }
        // query params
        if ($to_date !== null) {
            if('form' === 'form' && is_array($to_date)) {
                foreach($to_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['toDate'] = $to_date;
            }
        }
        // query params
        if ($query_child_accounts !== null) {
            if('form' === 'form' && is_array($query_child_accounts)) {
                foreach($query_child_accounts as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['queryChildAccounts'] = $query_child_accounts;
            }
        }

        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEnvelopeSigner
     *
     * Update envelope signer name, email, mobile phone, and password
     *
     * @param  string $envelope_id envelope_id (required)
     * @param  string $envelope_signer_id envelope_signer_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerRequest $update_envelope_signer_request update_envelope_signer_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse
     */
    public function updateEnvelopeSigner($envelope_id, $envelope_signer_id, $update_envelope_signer_request, $x_as_user_context = null)
    {
        list($response) = $this->updateEnvelopeSignerWithHttpInfo($envelope_id, $envelope_signer_id, $update_envelope_signer_request, $x_as_user_context);
        return $response;
    }

    /**
     * Operation updateEnvelopeSignerWithHttpInfo
     *
     * Update envelope signer name, email, mobile phone, and password
     *
     * @param  string $envelope_id (required)
     * @param  string $envelope_signer_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerRequest $update_envelope_signer_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \Nmusco\AssureSign\v3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerResponse|\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse|\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEnvelopeSignerWithHttpInfo($envelope_id, $envelope_signer_id, $update_envelope_signer_request, $x_as_user_context = null)
    {
        $request = $this->updateEnvelopeSignerRequest($envelope_id, $envelope_signer_id, $update_envelope_signer_request, $x_as_user_context);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nmusco\AssureSign\v3\Model\ErrorUnauthorizedRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEnvelopeSignerAsync
     *
     * Update envelope signer name, email, mobile phone, and password
     *
     * @param  string $envelope_id (required)
     * @param  string $envelope_signer_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerRequest $update_envelope_signer_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeSignerAsync($envelope_id, $envelope_signer_id, $update_envelope_signer_request, $x_as_user_context = null)
    {
        return $this->updateEnvelopeSignerAsyncWithHttpInfo($envelope_id, $envelope_signer_id, $update_envelope_signer_request, $x_as_user_context)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEnvelopeSignerAsyncWithHttpInfo
     *
     * Update envelope signer name, email, mobile phone, and password
     *
     * @param  string $envelope_id (required)
     * @param  string $envelope_signer_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerRequest $update_envelope_signer_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEnvelopeSignerAsyncWithHttpInfo($envelope_id, $envelope_signer_id, $update_envelope_signer_request, $x_as_user_context = null)
    {
        $returnType = '\Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerResponse';
        $request = $this->updateEnvelopeSignerRequest($envelope_id, $envelope_signer_id, $update_envelope_signer_request, $x_as_user_context);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEnvelopeSigner'
     *
     * @param  string $envelope_id (required)
     * @param  string $envelope_signer_id (required)
     * @param  \Nmusco\AssureSign\v3\Model\UpdateEnvelopeSignerRequest $update_envelope_signer_request (required)
     * @param  string $x_as_user_context {username}:{DocumentNOW Account Context Identifier} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEnvelopeSignerRequest($envelope_id, $envelope_signer_id, $update_envelope_signer_request, $x_as_user_context = null)
    {
        // verify the required parameter 'envelope_id' is set
        if ($envelope_id === null || (is_array($envelope_id) && count($envelope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_id when calling updateEnvelopeSigner'
            );
        }
        // verify the required parameter 'envelope_signer_id' is set
        if ($envelope_signer_id === null || (is_array($envelope_signer_id) && count($envelope_signer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $envelope_signer_id when calling updateEnvelopeSigner'
            );
        }
        // verify the required parameter 'update_envelope_signer_request' is set
        if ($update_envelope_signer_request === null || (is_array($update_envelope_signer_request) && count($update_envelope_signer_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_envelope_signer_request when calling updateEnvelopeSigner'
            );
        }

        $resourcePath = '/envelopes/{envelopeID}/signers/{envelopeSignerID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_as_user_context !== null) {
            $headerParams['X-AS-UserContext'] = ObjectSerializer::toHeaderValue($x_as_user_context);
        }

        // path params
        if ($envelope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeID' . '}',
                ObjectSerializer::toPathValue($envelope_id),
                $resourcePath
            );
        }
        // path params
        if ($envelope_signer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'envelopeSignerID' . '}',
                ObjectSerializer::toPathValue($envelope_signer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($update_envelope_signer_request)) {
            $_tempBody = $update_envelope_signer_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        if ($this->config->getAccessToken()) {
            $defaultHeaders['Authorization'] = "Bearer ".$this->config->getAccessToken();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
